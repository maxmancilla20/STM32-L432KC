
FreeRTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004500  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004690  08004690  00005690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800471c  0800471c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004724  08004724  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004724  08004724  00005724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800472c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000068  08004794  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  08004794  00006738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178ea  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307e  00000000  00000000  0001d982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00020a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001033  00000000  00000000  00021ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004156  00000000  00000000  00022f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b9a  00000000  00000000  00027069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f2f  00000000  00000000  0003dc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112b32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef8  00000000  00000000  00112b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00118a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004678 	.word	0x08004678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004678 	.word	0x08004678

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
int __io_putchar(int ch);

int msg[1] = {'H'};

int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0


  HAL_Init();
 80005a0:	f000 fb05 	bl	8000bae <HAL_Init>

  SystemClock_Config();
 80005a4:	f000 f81c 	bl	80005e0 <SystemClock_Config>


  MX_GPIO_Init();
 80005a8:	f000 f8ac 	bl	8000704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f87a 	bl	80006a4 <MX_USART2_UART_Init>


  while (1)
  {
    printf("Hello World!\n\r");
 80005b0:	4801      	ldr	r0, [pc, #4]	@ (80005b8 <main+0x1c>)
 80005b2:	f003 f9f5 	bl	80039a0 <iprintf>
 80005b6:	e7fb      	b.n	80005b0 <main+0x14>
 80005b8:	08004690 	.word	0x08004690

080005bc <__io_putchar>:
  }

}

int __io_putchar(int ch)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ca:	2201      	movs	r2, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <__io_putchar+0x20>)
 80005ce:	f002 fa23 	bl	8002a18 <HAL_UART_Transmit>
	return ch;
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000084 	.word	0x20000084

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	@ 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2244      	movs	r2, #68	@ 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fa2b 	bl	8003a4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000606:	f000 fd8d 	bl	8001124 <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000610:	f000 f8d4 	bl	80007bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000614:	f000 fd68 	bl	80010e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <SystemClock_Config+0xc0>)
 800061a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800061e:	4a20      	ldr	r2, [pc, #128]	@ (80006a0 <SystemClock_Config+0xc0>)
 8000620:	f023 0318 	bic.w	r3, r3, #24
 8000624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000628:	2314      	movs	r3, #20
 800062a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000638:	2360      	movs	r3, #96	@ 0x60
 800063a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000640:	2301      	movs	r3, #1
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000648:	2310      	movs	r3, #16
 800064a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064c:	2307      	movs	r3, #7
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fdb7 	bl	80011d0 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000668:	f000 f8a8 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2303      	movs	r3, #3
 8000672:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	2101      	movs	r1, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f9b7 	bl	80019f8 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000690:	f000 f894 	bl	80007bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000694:	f001 fdfc 	bl	8002290 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000698:	bf00      	nop
 800069a:	3758      	adds	r7, #88	@ 0x58
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006aa:	4a15      	ldr	r2, [pc, #84]	@ (8000700 <MX_USART2_UART_Init+0x5c>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_USART2_UART_Init+0x58>)
 80006e8:	f002 f948 	bl	800297c <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f863 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000084 	.word	0x20000084
 8000700:	40004400 	.word	0x40004400

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_GPIO_Init+0x8c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_GPIO_Init+0x8c>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_GPIO_Init+0x8c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_GPIO_Init+0x8c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a16      	ldr	r2, [pc, #88]	@ (8000790 <MX_GPIO_Init+0x8c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_GPIO_Init+0x8c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_GPIO_Init+0x8c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a10      	ldr	r2, [pc, #64]	@ (8000790 <MX_GPIO_Init+0x8c>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_GPIO_Init+0x8c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2108      	movs	r1, #8
 8000766:	480b      	ldr	r0, [pc, #44]	@ (8000794 <MX_GPIO_Init+0x90>)
 8000768:	f000 fca6 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800076c:	2308      	movs	r3, #8
 800076e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_GPIO_Init+0x90>)
 8000784:	f000 fb2e 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	48000400 	.word	0x48000400

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007aa:	f000 fa19 	bl	8000be0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40012c00 	.word	0x40012c00

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <HAL_MspInit+0x4c>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <HAL_MspInit+0x4c>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_MspInit+0x4c>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	210f      	movs	r1, #15
 8000802:	f06f 0001 	mvn.w	r0, #1
 8000806:	f000 fac3 	bl	8000d90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09e      	sub	sp, #120	@ 0x78
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2254      	movs	r2, #84	@ 0x54
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f003 f906 	bl	8003a4a <memset>
  if(huart->Instance==USART2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a1f      	ldr	r2, [pc, #124]	@ (80008c0 <HAL_UART_MspInit+0xa8>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d136      	bne.n	80008b6 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fb25 	bl	8001ea4 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000860:	f7ff ffac 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <HAL_UART_MspInit+0xac>)
 8000866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000868:	4a16      	ldr	r2, [pc, #88]	@ (80008c4 <HAL_UART_MspInit+0xac>)
 800086a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800086e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000870:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <HAL_UART_MspInit+0xac>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_UART_MspInit+0xac>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000880:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <HAL_UART_MspInit+0xac>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <HAL_UART_MspInit+0xac>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_3;
 8000894:	230c      	movs	r3, #12
 8000896:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a4:	2307      	movs	r3, #7
 80008a6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008ac:	4619      	mov	r1, r3
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b2:	f000 fa97 	bl	8000de4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008b6:	bf00      	nop
 80008b8:	3778      	adds	r7, #120	@ 0x78
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40004400 	.word	0x40004400
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	@ 0x30
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000990 <HAL_InitTick+0xc8>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008da:	4a2d      	ldr	r2, [pc, #180]	@ (8000990 <HAL_InitTick+0xc8>)
 80008dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000990 <HAL_InitTick+0xc8>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ee:	f107 020c 	add.w	r2, r7, #12
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fa41 	bl	8001d80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008fe:	f001 fa29 	bl	8001d54 <HAL_RCC_GetPCLK2Freq>
 8000902:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <HAL_InitTick+0xcc>)
 8000908:	fba2 2303 	umull	r2, r3, r2, r3
 800090c:	0c9b      	lsrs	r3, r3, #18
 800090e:	3b01      	subs	r3, #1
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <HAL_InitTick+0xd0>)
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <HAL_InitTick+0xd4>)
 8000916:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <HAL_InitTick+0xd0>)
 800091a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800091e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000920:	4a1d      	ldr	r2, [pc, #116]	@ (8000998 <HAL_InitTick+0xd0>)
 8000922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000924:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <HAL_InitTick+0xd0>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <HAL_InitTick+0xd0>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <HAL_InitTick+0xd0>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000938:	4817      	ldr	r0, [pc, #92]	@ (8000998 <HAL_InitTick+0xd0>)
 800093a:	f001 fdab 	bl	8002494 <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000944:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000948:	2b00      	cmp	r3, #0
 800094a:	d11b      	bne.n	8000984 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800094c:	4812      	ldr	r0, [pc, #72]	@ (8000998 <HAL_InitTick+0xd0>)
 800094e:	f001 fe03 	bl	8002558 <HAL_TIM_Base_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000958:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800095c:	2b00      	cmp	r3, #0
 800095e:	d111      	bne.n	8000984 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000960:	2019      	movs	r0, #25
 8000962:	f000 fa31 	bl	8000dc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d808      	bhi.n	800097e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	2019      	movs	r0, #25
 8000972:	f000 fa0d 	bl	8000d90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <HAL_InitTick+0xd8>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	e002      	b.n	8000984 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000988:	4618      	mov	r0, r3
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	431bde83 	.word	0x431bde83
 8000998:	2000010c 	.word	0x2000010c
 800099c:	40012c00 	.word	0x40012c00
 80009a0:	20000004 	.word	0x20000004

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009e2:	f001 fe0d 	bl	8002600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000010c 	.word	0x2000010c

080009f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	e00a      	b.n	8000a18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a02:	f3af 8000 	nop.w
 8000a06:	4601      	mov	r1, r0
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	b2ca      	uxtb	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf0      	blt.n	8000a02 <_read+0x12>
  }

  return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b086      	sub	sp, #24
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e009      	b.n	8000a50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	60ba      	str	r2, [r7, #8]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fdb9 	bl	80005bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf1      	blt.n	8000a3c <_write+0x12>
  }
  return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_close>:

int _close(int file)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_isatty>:

int _isatty(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad4:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <_sbrk+0x5c>)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <_sbrk+0x60>)
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <_sbrk+0x64>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <_sbrk+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d207      	bcs.n	8000b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000afc:	f002 fff4 	bl	8003ae8 <__errno>
 8000b00:	4603      	mov	r3, r0
 8000b02:	220c      	movs	r2, #12
 8000b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	e009      	b.n	8000b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <_sbrk+0x64>)
 8000b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000c000 	.word	0x2000c000
 8000b2c:	00000400 	.word	0x00000400
 8000b30:	20000158 	.word	0x20000158
 8000b34:	20000738 	.word	0x20000738

08000b38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b60:	f7ff ffea 	bl	8000b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba8 <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f002 ffb3 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b8e:	f7ff fd05 	bl	800059c <main>

08000b92 <LoopForever>:

LoopForever:
    b LoopForever
 8000b92:	e7fe      	b.n	8000b92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ba0:	0800472c 	.word	0x0800472c
  ldr r2, =_sbss
 8000ba4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ba8:	20000738 	.word	0x20000738

08000bac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_IRQHandler>

08000bae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f8de 	bl	8000d7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f7ff fe82 	bl	80008c8 <HAL_InitTick>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	71fb      	strb	r3, [r7, #7]
 8000bce:	e001      	b.n	8000bd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd0:	f7ff fdfa 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	2000015c 	.word	0x2000015c

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	@ (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	2000015c 	.word	0x2000015c

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	@ (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	@ (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	@ (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	@ 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	@ 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ff4c 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da2:	f7ff ff61 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000da6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f7ff ffb1 	bl	8000d14 <NVIC_EncodePriority>
 8000db2:	4602      	mov	r2, r0
 8000db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff80 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000dc0:	bf00      	nop
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff54 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e148      	b.n	8001086 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 813a 	beq.w	8001080 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x40>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d017      	beq.n	8000ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d123      	bne.n	8000f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	6939      	ldr	r1, [r7, #16]
 8000f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0203 	and.w	r2, r3, #3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8094 	beq.w	8001080 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b52      	ldr	r3, [pc, #328]	@ (80010a4 <HAL_GPIO_Init+0x2c0>)
 8000f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5c:	4a51      	ldr	r2, [pc, #324]	@ (80010a4 <HAL_GPIO_Init+0x2c0>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f64:	4b4f      	ldr	r3, [pc, #316]	@ (80010a4 <HAL_GPIO_Init+0x2c0>)
 8000f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f70:	4a4d      	ldr	r2, [pc, #308]	@ (80010a8 <HAL_GPIO_Init+0x2c4>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f9a:	d00d      	beq.n	8000fb8 <HAL_GPIO_Init+0x1d4>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a43      	ldr	r2, [pc, #268]	@ (80010ac <HAL_GPIO_Init+0x2c8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d007      	beq.n	8000fb4 <HAL_GPIO_Init+0x1d0>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a42      	ldr	r2, [pc, #264]	@ (80010b0 <HAL_GPIO_Init+0x2cc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d101      	bne.n	8000fb0 <HAL_GPIO_Init+0x1cc>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e004      	b.n	8000fba <HAL_GPIO_Init+0x1d6>
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	e002      	b.n	8000fba <HAL_GPIO_Init+0x1d6>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <HAL_GPIO_Init+0x1d6>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fca:	4937      	ldr	r1, [pc, #220]	@ (80010a8 <HAL_GPIO_Init+0x2c4>)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fd8:	4b36      	ldr	r3, [pc, #216]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001002:	4b2c      	ldr	r3, [pc, #176]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001026:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800102c:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001050:	4a18      	ldr	r2, [pc, #96]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001056:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800107a:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	f47f aeaf 	bne.w	8000df4 <HAL_GPIO_Init+0x10>
  }
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010000 	.word	0x40010000
 80010ac:	48000400 	.word	0x48000400
 80010b0:	48000800 	.word	0x48000800
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40007000 	.word	0x40007000

08001108 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <HAL_PWREx_GetVoltageRange+0x18>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40007000 	.word	0x40007000

08001124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001132:	d130      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001134:	4b23      	ldr	r3, [pc, #140]	@ (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800113c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001140:	d038      	beq.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800114a:	4a1e      	ldr	r2, [pc, #120]	@ (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2232      	movs	r2, #50	@ 0x32
 8001158:	fb02 f303 	mul.w	r3, r2, r3
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9b      	lsrs	r3, r3, #18
 8001164:	3301      	adds	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001168:	e002      	b.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3b01      	subs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800117c:	d102      	bne.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f2      	bne.n	800116a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800118c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001190:	d110      	bne.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e00f      	b.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800119e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a2:	d007      	beq.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ac:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40007000 	.word	0x40007000
 80011c8:	20000000 	.word	0x20000000
 80011cc:	431bde83 	.word	0x431bde83

080011d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	f000 bc02 	b.w	80019e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e4:	4b96      	ldr	r3, [pc, #600]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ee:	4b94      	ldr	r3, [pc, #592]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80e4 	beq.w	80013ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <HAL_RCC_OscConfig+0x4c>
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	f040 808b 	bne.w	800132a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2b01      	cmp	r3, #1
 8001218:	f040 8087 	bne.w	800132a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800121c:	4b88      	ldr	r3, [pc, #544]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_OscConfig+0x64>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e3d9      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1a      	ldr	r2, [r3, #32]
 8001238:	4b81      	ldr	r3, [pc, #516]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <HAL_RCC_OscConfig+0x7e>
 8001244:	4b7e      	ldr	r3, [pc, #504]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800124c:	e005      	b.n	800125a <HAL_RCC_OscConfig+0x8a>
 800124e:	4b7c      	ldr	r3, [pc, #496]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800125a:	4293      	cmp	r3, r2
 800125c:	d223      	bcs.n	80012a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fdbe 	bl	8001de4 <RCC_SetFlashLatencyFromMSIRange>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e3ba      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001272:	4b73      	ldr	r3, [pc, #460]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a72      	ldr	r2, [pc, #456]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b70      	ldr	r3, [pc, #448]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	496d      	ldr	r1, [pc, #436]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001290:	4b6b      	ldr	r3, [pc, #428]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	4968      	ldr	r1, [pc, #416]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
 80012a4:	e025      	b.n	80012f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a6:	4b66      	ldr	r3, [pc, #408]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a65      	ldr	r2, [pc, #404]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b63      	ldr	r3, [pc, #396]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4960      	ldr	r1, [pc, #384]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	495b      	ldr	r1, [pc, #364]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fd7e 	bl	8001de4 <RCC_SetFlashLatencyFromMSIRange>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e37a      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f2:	f000 fc81 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b51      	ldr	r3, [pc, #324]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	4950      	ldr	r1, [pc, #320]	@ (8001444 <HAL_RCC_OscConfig+0x274>)
 8001304:	5ccb      	ldrb	r3, [r1, r3]
 8001306:	f003 031f 	and.w	r3, r3, #31
 800130a:	fa22 f303 	lsr.w	r3, r2, r3
 800130e:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <HAL_RCC_OscConfig+0x278>)
 8001310:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001312:	4b4e      	ldr	r3, [pc, #312]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fad6 	bl	80008c8 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d052      	beq.n	80013cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	e35e      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d032      	beq.n	8001398 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001332:	4b43      	ldr	r3, [pc, #268]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a42      	ldr	r2, [pc, #264]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800133e:	f7ff fc63 	bl	8000c08 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001346:	f7ff fc5f 	bl	8000c08 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e347      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001358:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a35      	ldr	r2, [pc, #212]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4930      	ldr	r1, [pc, #192]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	492b      	ldr	r1, [pc, #172]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
 8001396:	e01a      	b.n	80013ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001398:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc30 	bl	8000c08 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ac:	f7ff fc2c 	bl	8000c08 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e314      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x1dc>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d073      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d005      	beq.n	80013ec <HAL_RCC_OscConfig+0x21c>
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d10e      	bne.n	8001404 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d063      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d15f      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e2f1      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x24c>
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e025      	b.n	8001468 <HAL_RCC_OscConfig+0x298>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001424:	d114      	bne.n	8001450 <HAL_RCC_OscConfig+0x280>
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a02      	ldr	r2, [pc, #8]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e013      	b.n	8001468 <HAL_RCC_OscConfig+0x298>
 8001440:	40021000 	.word	0x40021000
 8001444:	080046a0 	.word	0x080046a0
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004
 8001450:	4ba0      	ldr	r3, [pc, #640]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a9f      	ldr	r2, [pc, #636]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b9d      	ldr	r3, [pc, #628]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a9c      	ldr	r2, [pc, #624]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fbca 	bl	8000c08 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fbc6 	bl	8000c08 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	@ 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e2ae      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148a:	4b92      	ldr	r3, [pc, #584]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x2a8>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fbb6 	bl	8000c08 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fbb2 	bl	8000c08 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	@ 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e29a      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b2:	4b88      	ldr	r3, [pc, #544]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2d0>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d060      	beq.n	8001590 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_OscConfig+0x310>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d119      	bne.n	800150e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d116      	bne.n	800150e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e0:	4b7c      	ldr	r3, [pc, #496]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_OscConfig+0x328>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e277      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b76      	ldr	r3, [pc, #472]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	4973      	ldr	r1, [pc, #460]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150c:	e040      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d023      	beq.n	800155e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001516:	4b6f      	ldr	r3, [pc, #444]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6e      	ldr	r2, [pc, #440]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff fb71 	bl	8000c08 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fb6d 	bl	8000c08 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e255      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153c:	4b65      	ldr	r3, [pc, #404]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b62      	ldr	r3, [pc, #392]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	495f      	ldr	r1, [pc, #380]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
 800155c:	e018      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b5d      	ldr	r3, [pc, #372]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a5c      	ldr	r2, [pc, #368]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fb4d 	bl	8000c08 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fb49 	bl	8000c08 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e231      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001584:	4b53      	ldr	r3, [pc, #332]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d03c      	beq.n	8001616 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01c      	beq.n	80015de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a4:	4b4b      	ldr	r3, [pc, #300]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015aa:	4a4a      	ldr	r2, [pc, #296]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb28 	bl	8000c08 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fb24 	bl	8000c08 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e20c      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ce:	4b41      	ldr	r3, [pc, #260]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ef      	beq.n	80015bc <HAL_RCC_OscConfig+0x3ec>
 80015dc:	e01b      	b.n	8001616 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015de:	4b3d      	ldr	r3, [pc, #244]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e4:	4a3b      	ldr	r2, [pc, #236]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff fb0b 	bl	8000c08 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb07 	bl	8000c08 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1ef      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001608:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ef      	bne.n	80015f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80a6 	beq.w	8001770 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001628:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001638:	4a26      	ldr	r2, [pc, #152]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001640:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164c:	2301      	movs	r3, #1
 800164e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d118      	bne.n	800168e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <HAL_RCC_OscConfig+0x508>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001668:	f7ff face 	bl	8000c08 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001670:	f7ff faca 	bl	8000c08 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1b2      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4d8>
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016a6:	e029      	b.n	80016fc <HAL_RCC_OscConfig+0x52c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d115      	bne.n	80016dc <HAL_RCC_OscConfig+0x50c>
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b6:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c6:	4a03      	ldr	r2, [pc, #12]	@ (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d0:	e014      	b.n	80016fc <HAL_RCC_OscConfig+0x52c>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40007000 	.word	0x40007000
 80016dc:	4b9a      	ldr	r3, [pc, #616]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e2:	4a99      	ldr	r2, [pc, #612]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ec:	4b96      	ldr	r3, [pc, #600]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f2:	4a95      	ldr	r2, [pc, #596]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d016      	beq.n	8001732 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fa80 	bl	8000c08 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff fa7c 	bl	8000c08 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e162      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001722:	4b89      	ldr	r3, [pc, #548]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ed      	beq.n	800170c <HAL_RCC_OscConfig+0x53c>
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fa69 	bl	8000c08 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff fa65 	bl	8000c08 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e14b      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001750:	4b7d      	ldr	r3, [pc, #500]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ed      	bne.n	800173a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b78      	ldr	r3, [pc, #480]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001768:	4a77      	ldr	r2, [pc, #476]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 800176a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800176e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01c      	beq.n	80017be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001784:	4b70      	ldr	r3, [pc, #448]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800178a:	4a6f      	ldr	r2, [pc, #444]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fa38 	bl	8000c08 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800179c:	f7ff fa34 	bl	8000c08 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e11c      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ae:	4b66      	ldr	r3, [pc, #408]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80017b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ef      	beq.n	800179c <HAL_RCC_OscConfig+0x5cc>
 80017bc:	e01b      	b.n	80017f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017be:	4b62      	ldr	r3, [pc, #392]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80017c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017c4:	4a60      	ldr	r2, [pc, #384]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff fa1b 	bl	8000c08 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d6:	f7ff fa17 	bl	8000c08 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0ff      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e8:	4b57      	ldr	r3, [pc, #348]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80017ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ef      	bne.n	80017d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80f3 	beq.w	80019e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001804:	2b02      	cmp	r3, #2
 8001806:	f040 80c9 	bne.w	800199c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800180a:	4b4f      	ldr	r3, [pc, #316]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0203 	and.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181a:	429a      	cmp	r2, r3
 800181c:	d12c      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	3b01      	subs	r3, #1
 800182a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d123      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d11b      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800184a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d113      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d109      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	3b01      	subs	r3, #1
 8001872:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d06b      	beq.n	8001950 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d062      	beq.n	8001944 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800187e:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0ac      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800188e:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2d      	ldr	r2, [pc, #180]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001894:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001898:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800189a:	f7ff f9b5 	bl	8000c08 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff f9b1 	bl	8000c08 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e099      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b4:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c0:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	4b21      	ldr	r3, [pc, #132]	@ (800194c <HAL_RCC_OscConfig+0x77c>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018d0:	3a01      	subs	r2, #1
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	4311      	orrs	r1, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018da:	0212      	lsls	r2, r2, #8
 80018dc:	4311      	orrs	r1, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018e2:	0852      	lsrs	r2, r2, #1
 80018e4:	3a01      	subs	r2, #1
 80018e6:	0552      	lsls	r2, r2, #21
 80018e8:	4311      	orrs	r1, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018ee:	0852      	lsrs	r2, r2, #1
 80018f0:	3a01      	subs	r2, #1
 80018f2:	0652      	lsls	r2, r2, #25
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018fa:	06d2      	lsls	r2, r2, #27
 80018fc:	430a      	orrs	r2, r1
 80018fe:	4912      	ldr	r1, [pc, #72]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001900:	4313      	orrs	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001904:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 800190a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001910:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4a0c      	ldr	r2, [pc, #48]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800191c:	f7ff f974 	bl	8000c08 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff f970 	bl	8000c08 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e058      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <HAL_RCC_OscConfig+0x778>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001942:	e050      	b.n	80019e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e04f      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
 8001948:	40021000 	.word	0x40021000
 800194c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001950:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d144      	bne.n	80019e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800195c:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a23      	ldr	r2, [pc, #140]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a20      	ldr	r2, [pc, #128]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001974:	f7ff f948 	bl	8000c08 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f944 	bl	8000c08 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e02c      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x7ac>
 800199a:	e024      	b.n	80019e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d01f      	beq.n	80019e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 80019a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f92b 	bl	8000c08 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff f927 	bl	8000c08 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e00f      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	4905      	ldr	r1, [pc, #20]	@ (80019f0 <HAL_RCC_OscConfig+0x820>)
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_RCC_OscConfig+0x824>)
 80019dc:	4013      	ands	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
 80019e0:	e001      	b.n	80019e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	feeefffc 	.word	0xfeeefffc

080019f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0e7      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b75      	ldr	r3, [pc, #468]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d910      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b72      	ldr	r3, [pc, #456]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0207 	bic.w	r2, r3, #7
 8001a22:	4970      	ldr	r1, [pc, #448]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0cf      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d010      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	4b66      	ldr	r3, [pc, #408]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d908      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4b63      	ldr	r3, [pc, #396]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4960      	ldr	r1, [pc, #384]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d04c      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d121      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0a6      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a96:	4b54      	ldr	r3, [pc, #336]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d115      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e09a      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aae:	4b4e      	ldr	r3, [pc, #312]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e08e      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abe:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e086      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b46      	ldr	r3, [pc, #280]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4943      	ldr	r1, [pc, #268]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f892 	bl	8000c08 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff f88e 	bl	8000c08 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e06e      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b3a      	ldr	r3, [pc, #232]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	4b31      	ldr	r3, [pc, #196]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d208      	bcs.n	8001b3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	492b      	ldr	r1, [pc, #172]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3e:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d210      	bcs.n	8001b6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 0207 	bic.w	r2, r3, #7
 8001b54:	4923      	ldr	r1, [pc, #140]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5c:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e036      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	4918      	ldr	r1, [pc, #96]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4910      	ldr	r1, [pc, #64]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bac:	f000 f824 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	490b      	ldr	r1, [pc, #44]	@ (8001bec <HAL_RCC_ClockConfig+0x1f4>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	4a09      	ldr	r2, [pc, #36]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1fc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fe79 	bl	80008c8 <HAL_InitTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bda:	7afb      	ldrb	r3, [r7, #11]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	080046a0 	.word	0x080046a0
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b3e      	ldr	r3, [pc, #248]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x34>
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d121      	bne.n	8001c6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d11e      	bne.n	8001c6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c2c:	4b34      	ldr	r3, [pc, #208]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c38:	4b31      	ldr	r3, [pc, #196]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e005      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c48:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c54:	4a2b      	ldr	r2, [pc, #172]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d102      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	e004      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c7c:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d134      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d003      	beq.n	8001c9e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d003      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xac>
 8001c9c:	e005      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca0:	617b      	str	r3, [r7, #20]
      break;
 8001ca2:	e005      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ca6:	617b      	str	r3, [r7, #20]
      break;
 8001ca8:	e002      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	617b      	str	r3, [r7, #20]
      break;
 8001cae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	3301      	adds	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	fb03 f202 	mul.w	r2, r3, r2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	0e5b      	lsrs	r3, r3, #25
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	@ 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	080046b8 	.word	0x080046b8
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	007a1200 	.word	0x007a1200

08001d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4904      	ldr	r1, [pc, #16]	@ (8001d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	080046b0 	.word	0x080046b0

08001d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d58:	f7ff ffda 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0adb      	lsrs	r3, r3, #11
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4904      	ldr	r1, [pc, #16]	@ (8001d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	080046b0 	.word	0x080046b0

08001d80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_RCC_GetClockConfig+0x5c>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <HAL_RCC_GetClockConfig+0x5c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001da8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_RCC_GetClockConfig+0x5c>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001db4:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_RCC_GetClockConfig+0x5c>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <HAL_RCC_GetClockConfig+0x60>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0207 	and.w	r2, r3, #7
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	601a      	str	r2, [r3, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40022000 	.word	0x40022000

08001de4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dfc:	f7ff f984 	bl	8001108 <HAL_PWREx_GetVoltageRange>
 8001e00:	6178      	str	r0, [r7, #20]
 8001e02:	e014      	b.n	8001e2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	4a24      	ldr	r2, [pc, #144]	@ (8001e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e10:	4b22      	ldr	r3, [pc, #136]	@ (8001e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e1c:	f7ff f974 	bl	8001108 <HAL_PWREx_GetVoltageRange>
 8001e20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	4a1d      	ldr	r2, [pc, #116]	@ (8001e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e34:	d10b      	bne.n	8001e4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b80      	cmp	r3, #128	@ 0x80
 8001e3a:	d919      	bls.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e40:	d902      	bls.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e42:	2302      	movs	r3, #2
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	e013      	b.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e48:	2301      	movs	r3, #1
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	e010      	b.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b80      	cmp	r3, #128	@ 0x80
 8001e52:	d902      	bls.n	8001e5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e54:	2303      	movs	r3, #3
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	e00a      	b.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b80      	cmp	r3, #128	@ 0x80
 8001e5e:	d102      	bne.n	8001e66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e60:	2302      	movs	r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	e004      	b.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b70      	cmp	r3, #112	@ 0x70
 8001e6a:	d101      	bne.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 0207 	bic.w	r2, r3, #7
 8001e78:	4909      	ldr	r1, [pc, #36]	@ (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e80:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d001      	beq.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eac:	2300      	movs	r3, #0
 8001eae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d031      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ec8:	d01a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001eca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ece:	d814      	bhi.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ed4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ed8:	d10f      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001eda:	4b5d      	ldr	r3, [pc, #372]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4a5c      	ldr	r2, [pc, #368]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ee6:	e00c      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3304      	adds	r3, #4
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f9de 	bl	80022b0 <RCCEx_PLLSAI1_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef8:	e003      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	74fb      	strb	r3, [r7, #19]
      break;
 8001efe:	e000      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f02:	7cfb      	ldrb	r3, [r7, #19]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10b      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f08:	4b51      	ldr	r3, [pc, #324]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f16:	494e      	ldr	r1, [pc, #312]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f1e:	e001      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 809e 	beq.w	800206e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f36:	4b46      	ldr	r3, [pc, #280]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001f46:	2300      	movs	r3, #0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00d      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b40      	ldr	r3, [pc, #256]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	4a3f      	ldr	r2, [pc, #252]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f58:	4b3d      	ldr	r3, [pc, #244]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f64:	2301      	movs	r3, #1
 8001f66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f68:	4b3a      	ldr	r3, [pc, #232]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a39      	ldr	r2, [pc, #228]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fe48 	bl	8000c08 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f7a:	e009      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7c:	f7fe fe44 	bl	8000c08 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d902      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f8e:	e005      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f90:	4b30      	ldr	r3, [pc, #192]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ef      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d15a      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01e      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d019      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fda:	4b1d      	ldr	r3, [pc, #116]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fea:	4a19      	ldr	r2, [pc, #100]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d016      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fe04 	bl	8000c08 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002002:	e00b      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe fe00 	bl	8000c08 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d902      	bls.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	74fb      	strb	r3, [r7, #19]
            break;
 800201a:	e006      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ec      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002036:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800203e:	4904      	ldr	r1, [pc, #16]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002046:	e009      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
 800204c:	e006      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800205c:	7c7b      	ldrb	r3, [r7, #17]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d105      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002062:	4b8a      	ldr	r3, [pc, #552]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002066:	4a89      	ldr	r2, [pc, #548]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002068:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800206c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800207a:	4b84      	ldr	r3, [pc, #528]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002080:	f023 0203 	bic.w	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4980      	ldr	r1, [pc, #512]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800209c:	4b7b      	ldr	r3, [pc, #492]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a2:	f023 020c 	bic.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	4978      	ldr	r1, [pc, #480]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020be:	4b73      	ldr	r3, [pc, #460]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	496f      	ldr	r1, [pc, #444]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020e0:	4b6a      	ldr	r3, [pc, #424]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ee:	4967      	ldr	r1, [pc, #412]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002102:	4b62      	ldr	r3, [pc, #392]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002108:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002110:	495e      	ldr	r1, [pc, #376]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002124:	4b59      	ldr	r3, [pc, #356]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002132:	4956      	ldr	r1, [pc, #344]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002146:	4b51      	ldr	r3, [pc, #324]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	494d      	ldr	r1, [pc, #308]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d028      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002168:	4b48      	ldr	r3, [pc, #288]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4945      	ldr	r1, [pc, #276]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002186:	d106      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002188:	4b40      	ldr	r3, [pc, #256]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a3f      	ldr	r2, [pc, #252]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002192:	60d3      	str	r3, [r2, #12]
 8002194:	e011      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800219e:	d10c      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	2101      	movs	r1, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f882 	bl	80022b0 <RCCEx_PLLSAI1_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d028      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021c6:	4b31      	ldr	r3, [pc, #196]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	492d      	ldr	r1, [pc, #180]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021e4:	d106      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e6:	4b29      	ldr	r3, [pc, #164]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	4a28      	ldr	r2, [pc, #160]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021f0:	60d3      	str	r3, [r2, #12]
 80021f2:	e011      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	2101      	movs	r1, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f853 	bl	80022b0 <RCCEx_PLLSAI1_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01c      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002224:	4b19      	ldr	r3, [pc, #100]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002232:	4916      	ldr	r1, [pc, #88]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002242:	d10c      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	2102      	movs	r1, #2
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f830 	bl	80022b0 <RCCEx_PLLSAI1_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002270:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002278:	4904      	ldr	r1, [pc, #16]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002280:	7cbb      	ldrb	r3, [r7, #18]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a04      	ldr	r2, [pc, #16]	@ (80022ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000

080022b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022be:	4b74      	ldr	r3, [pc, #464]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d018      	beq.n	80022fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022ca:	4b71      	ldr	r3, [pc, #452]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0203 	and.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d10d      	bne.n	80022f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
       ||
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
       ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d047      	beq.n	8002386 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e044      	b.n	8002386 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d018      	beq.n	8002336 <RCCEx_PLLSAI1_Config+0x86>
 8002304:	2b03      	cmp	r3, #3
 8002306:	d825      	bhi.n	8002354 <RCCEx_PLLSAI1_Config+0xa4>
 8002308:	2b01      	cmp	r3, #1
 800230a:	d002      	beq.n	8002312 <RCCEx_PLLSAI1_Config+0x62>
 800230c:	2b02      	cmp	r3, #2
 800230e:	d009      	beq.n	8002324 <RCCEx_PLLSAI1_Config+0x74>
 8002310:	e020      	b.n	8002354 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002312:	4b5f      	ldr	r3, [pc, #380]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d11d      	bne.n	800235a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002322:	e01a      	b.n	800235a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002324:	4b5a      	ldr	r3, [pc, #360]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d116      	bne.n	800235e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002334:	e013      	b.n	800235e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002336:	4b56      	ldr	r3, [pc, #344]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10f      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002342:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002352:	e006      	b.n	8002362 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      break;
 8002358:	e004      	b.n	8002364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800235a:	bf00      	nop
 800235c:	e002      	b.n	8002364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800235e:	bf00      	nop
 8002360:	e000      	b.n	8002364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002362:	bf00      	nop
    }

    if(status == HAL_OK)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800236a:	4b49      	ldr	r3, [pc, #292]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	430b      	orrs	r3, r1
 8002380:	4943      	ldr	r1, [pc, #268]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d17c      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800238c:	4b40      	ldr	r3, [pc, #256]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3f      	ldr	r2, [pc, #252]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002392:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002398:	f7fe fc36 	bl	8000c08 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800239e:	e009      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023a0:	f7fe fc32 	bl	8000c08 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d902      	bls.n	80023b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	73fb      	strb	r3, [r7, #15]
        break;
 80023b2:	e005      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023b4:	4b36      	ldr	r3, [pc, #216]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ef      	bne.n	80023a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d15f      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d110      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023cc:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80023d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6892      	ldr	r2, [r2, #8]
 80023dc:	0211      	lsls	r1, r2, #8
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68d2      	ldr	r2, [r2, #12]
 80023e2:	06d2      	lsls	r2, r2, #27
 80023e4:	430a      	orrs	r2, r1
 80023e6:	492a      	ldr	r1, [pc, #168]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	610b      	str	r3, [r1, #16]
 80023ec:	e027      	b.n	800243e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d112      	bne.n	800241a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023f4:	4b26      	ldr	r3, [pc, #152]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80023fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6892      	ldr	r2, [r2, #8]
 8002404:	0211      	lsls	r1, r2, #8
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6912      	ldr	r2, [r2, #16]
 800240a:	0852      	lsrs	r2, r2, #1
 800240c:	3a01      	subs	r2, #1
 800240e:	0552      	lsls	r2, r2, #21
 8002410:	430a      	orrs	r2, r1
 8002412:	491f      	ldr	r1, [pc, #124]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	610b      	str	r3, [r1, #16]
 8002418:	e011      	b.n	800243e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800241a:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002422:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	0211      	lsls	r1, r2, #8
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6952      	ldr	r2, [r2, #20]
 8002430:	0852      	lsrs	r2, r2, #1
 8002432:	3a01      	subs	r2, #1
 8002434:	0652      	lsls	r2, r2, #25
 8002436:	430a      	orrs	r2, r1
 8002438:	4915      	ldr	r1, [pc, #84]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243a:	4313      	orrs	r3, r2
 800243c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a13      	ldr	r2, [pc, #76]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002444:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002448:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe fbdd 	bl	8000c08 <HAL_GetTick>
 800244e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002450:	e009      	b.n	8002466 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002452:	f7fe fbd9 	bl	8000c08 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d902      	bls.n	8002466 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	73fb      	strb	r3, [r7, #15]
          break;
 8002464:	e005      	b.n	8002472 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002466:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0ef      	beq.n	8002452 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4903      	ldr	r1, [pc, #12]	@ (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002482:	4313      	orrs	r3, r2
 8002484:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000

08002494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e049      	b.n	800253a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f841 	bl	8002542 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3304      	adds	r3, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4610      	mov	r0, r2
 80024d4:	f000 f9c4 	bl	8002860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d001      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e03b      	b.n	80025e8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a19      	ldr	r2, [pc, #100]	@ (80025f4 <HAL_TIM_Base_Start_IT+0x9c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_TIM_Base_Start_IT+0x4e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800259a:	d004      	beq.n	80025a6 <HAL_TIM_Base_Start_IT+0x4e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a15      	ldr	r2, [pc, #84]	@ (80025f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d115      	bne.n	80025d2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <HAL_TIM_Base_Start_IT+0xa4>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b06      	cmp	r3, #6
 80025b6:	d015      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x8c>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025be:	d011      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d0:	e008      	b.n	80025e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e000      	b.n	80025e6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40014000 	.word	0x40014000
 80025fc:	00010007 	.word	0x00010007

08002600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d020      	beq.n	8002664 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01b      	beq.n	8002664 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0202 	mvn.w	r2, #2
 8002634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f8e9 	bl	8002822 <HAL_TIM_IC_CaptureCallback>
 8002650:	e005      	b.n	800265e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8db 	bl	800280e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f8ec 	bl	8002836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d020      	beq.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01b      	beq.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0204 	mvn.w	r2, #4
 8002680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8c3 	bl	8002822 <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8b5 	bl	800280e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f8c6 	bl	8002836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d020      	beq.n	80026fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01b      	beq.n	80026fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0208 	mvn.w	r2, #8
 80026cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f89d 	bl	8002822 <HAL_TIM_IC_CaptureCallback>
 80026e8:	e005      	b.n	80026f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f88f 	bl	800280e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f8a0 	bl	8002836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	d020      	beq.n	8002748 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0210 	mvn.w	r2, #16
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2208      	movs	r2, #8
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f877 	bl	8002822 <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f869 	bl	800280e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f87a 	bl	8002836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0201 	mvn.w	r2, #1
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe f816 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d104      	bne.n	8002780 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00c      	beq.n	800279a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f8dd 	bl	8002954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00c      	beq.n	80027be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80027b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f8d5 	bl	8002968 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00c      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f834 	bl	800284a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00c      	beq.n	8002806 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f06f 0220 	mvn.w	r2, #32
 80027fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f89d 	bl	8002940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a30      	ldr	r2, [pc, #192]	@ (8002934 <TIM_Base_SetConfig+0xd4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <TIM_Base_SetConfig+0x20>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800287e:	d108      	bne.n	8002892 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a27      	ldr	r2, [pc, #156]	@ (8002934 <TIM_Base_SetConfig+0xd4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00b      	beq.n	80028b2 <TIM_Base_SetConfig+0x52>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a0:	d007      	beq.n	80028b2 <TIM_Base_SetConfig+0x52>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a24      	ldr	r2, [pc, #144]	@ (8002938 <TIM_Base_SetConfig+0xd8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_Base_SetConfig+0x52>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a23      	ldr	r2, [pc, #140]	@ (800293c <TIM_Base_SetConfig+0xdc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <TIM_Base_SetConfig+0xd4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <TIM_Base_SetConfig+0xa0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <TIM_Base_SetConfig+0xd8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <TIM_Base_SetConfig+0xa0>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a10      	ldr	r2, [pc, #64]	@ (800293c <TIM_Base_SetConfig+0xdc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d103      	bne.n	8002908 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f023 0201 	bic.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]
  }
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40014000 	.word	0x40014000
 800293c:	40014400 	.word	0x40014400

08002940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e040      	b.n	8002a10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fd ff3a 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	@ 0x24
 80029a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fade 	bl	8002f84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f8af 	bl	8002b2c <UART_SetConfig>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e01b      	b.n	8002a10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fb5d 	bl	80030c8 <UART_CheckIdleState>
 8002a0e:	4603      	mov	r3, r0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d177      	bne.n	8002b20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_UART_Transmit+0x24>
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e070      	b.n	8002b22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2221      	movs	r2, #33	@ 0x21
 8002a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe f8db 	bl	8000c08 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6c:	d108      	bne.n	8002a80 <HAL_UART_Transmit+0x68>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e003      	b.n	8002a88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a88:	e02f      	b.n	8002aea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2200      	movs	r2, #0
 8002a92:	2180      	movs	r1, #128	@ 0x80
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fbbf 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e03b      	b.n	8002b22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	881a      	ldrh	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002abc:	b292      	uxth	r2, r2
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e007      	b.n	8002ad8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1c9      	bne.n	8002a8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2140      	movs	r1, #64	@ 0x40
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fb89 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e005      	b.n	8002b22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b30:	b08a      	sub	sp, #40	@ 0x28
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4bb4      	ldr	r3, [pc, #720]	@ (8002e2c <UART_SetConfig+0x300>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4aa9      	ldr	r2, [pc, #676]	@ (8002e30 <UART_SetConfig+0x304>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b94:	4313      	orrs	r3, r2
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4aa0      	ldr	r2, [pc, #640]	@ (8002e34 <UART_SetConfig+0x308>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d126      	bne.n	8002c04 <UART_SetConfig+0xd8>
 8002bb6:	4ba0      	ldr	r3, [pc, #640]	@ (8002e38 <UART_SetConfig+0x30c>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d81b      	bhi.n	8002bfc <UART_SetConfig+0xd0>
 8002bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bcc <UART_SetConfig+0xa0>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002bdd 	.word	0x08002bdd
 8002bd0:	08002bed 	.word	0x08002bed
 8002bd4:	08002be5 	.word	0x08002be5
 8002bd8:	08002bf5 	.word	0x08002bf5
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002be2:	e080      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002be4:	2302      	movs	r3, #2
 8002be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bea:	e07c      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002bec:	2304      	movs	r3, #4
 8002bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bf2:	e078      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bfa:	e074      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c02:	e070      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a8c      	ldr	r2, [pc, #560]	@ (8002e3c <UART_SetConfig+0x310>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d138      	bne.n	8002c80 <UART_SetConfig+0x154>
 8002c0e:	4b8a      	ldr	r3, [pc, #552]	@ (8002e38 <UART_SetConfig+0x30c>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d82d      	bhi.n	8002c78 <UART_SetConfig+0x14c>
 8002c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <UART_SetConfig+0xf8>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c59 	.word	0x08002c59
 8002c28:	08002c79 	.word	0x08002c79
 8002c2c:	08002c79 	.word	0x08002c79
 8002c30:	08002c79 	.word	0x08002c79
 8002c34:	08002c69 	.word	0x08002c69
 8002c38:	08002c79 	.word	0x08002c79
 8002c3c:	08002c79 	.word	0x08002c79
 8002c40:	08002c79 	.word	0x08002c79
 8002c44:	08002c61 	.word	0x08002c61
 8002c48:	08002c79 	.word	0x08002c79
 8002c4c:	08002c79 	.word	0x08002c79
 8002c50:	08002c79 	.word	0x08002c79
 8002c54:	08002c71 	.word	0x08002c71
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c5e:	e042      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002c60:	2302      	movs	r3, #2
 8002c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c66:	e03e      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c6e:	e03a      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002c70:	2308      	movs	r3, #8
 8002c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c76:	e036      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002c78:	2310      	movs	r3, #16
 8002c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c7e:	e032      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6a      	ldr	r2, [pc, #424]	@ (8002e30 <UART_SetConfig+0x304>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d12a      	bne.n	8002ce0 <UART_SetConfig+0x1b4>
 8002c8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002e38 <UART_SetConfig+0x30c>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c98:	d01a      	beq.n	8002cd0 <UART_SetConfig+0x1a4>
 8002c9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c9e:	d81b      	bhi.n	8002cd8 <UART_SetConfig+0x1ac>
 8002ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ca4:	d00c      	beq.n	8002cc0 <UART_SetConfig+0x194>
 8002ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002caa:	d815      	bhi.n	8002cd8 <UART_SetConfig+0x1ac>
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <UART_SetConfig+0x18c>
 8002cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb4:	d008      	beq.n	8002cc8 <UART_SetConfig+0x19c>
 8002cb6:	e00f      	b.n	8002cd8 <UART_SetConfig+0x1ac>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cbe:	e012      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cc6:	e00e      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002cc8:	2304      	movs	r3, #4
 8002cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cce:	e00a      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd6:	e006      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002cd8:	2310      	movs	r3, #16
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cde:	e002      	b.n	8002ce6 <UART_SetConfig+0x1ba>
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a51      	ldr	r2, [pc, #324]	@ (8002e30 <UART_SetConfig+0x304>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d17a      	bne.n	8002de6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d824      	bhi.n	8002d42 <UART_SetConfig+0x216>
 8002cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <UART_SetConfig+0x1d4>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d25 	.word	0x08002d25
 8002d04:	08002d43 	.word	0x08002d43
 8002d08:	08002d2d 	.word	0x08002d2d
 8002d0c:	08002d43 	.word	0x08002d43
 8002d10:	08002d33 	.word	0x08002d33
 8002d14:	08002d43 	.word	0x08002d43
 8002d18:	08002d43 	.word	0x08002d43
 8002d1c:	08002d43 	.word	0x08002d43
 8002d20:	08002d3b 	.word	0x08002d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d24:	f7ff f800 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002d28:	61f8      	str	r0, [r7, #28]
        break;
 8002d2a:	e010      	b.n	8002d4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d2c:	4b44      	ldr	r3, [pc, #272]	@ (8002e40 <UART_SetConfig+0x314>)
 8002d2e:	61fb      	str	r3, [r7, #28]
        break;
 8002d30:	e00d      	b.n	8002d4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d32:	f7fe ff61 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8002d36:	61f8      	str	r0, [r7, #28]
        break;
 8002d38:	e009      	b.n	8002d4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d3e:	61fb      	str	r3, [r7, #28]
        break;
 8002d40:	e005      	b.n	8002d4e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8107 	beq.w	8002f64 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d305      	bcc.n	8002d72 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d903      	bls.n	8002d7a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d78:	e0f4      	b.n	8002f64 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	461c      	mov	r4, r3
 8002d80:	4615      	mov	r5, r2
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	022b      	lsls	r3, r5, #8
 8002d8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d90:	0222      	lsls	r2, r4, #8
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	6849      	ldr	r1, [r1, #4]
 8002d96:	0849      	lsrs	r1, r1, #1
 8002d98:	2000      	movs	r0, #0
 8002d9a:	4688      	mov	r8, r1
 8002d9c:	4681      	mov	r9, r0
 8002d9e:	eb12 0a08 	adds.w	sl, r2, r8
 8002da2:	eb43 0b09 	adc.w	fp, r3, r9
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002db4:	4650      	mov	r0, sl
 8002db6:	4659      	mov	r1, fp
 8002db8:	f7fd fa5a 	bl	8000270 <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dca:	d308      	bcc.n	8002dde <UART_SetConfig+0x2b2>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dd2:	d204      	bcs.n	8002dde <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	e0c2      	b.n	8002f64 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002de4:	e0be      	b.n	8002f64 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dee:	d16a      	bne.n	8002ec6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002df0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d834      	bhi.n	8002e62 <UART_SetConfig+0x336>
 8002df8:	a201      	add	r2, pc, #4	@ (adr r2, 8002e00 <UART_SetConfig+0x2d4>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e25 	.word	0x08002e25
 8002e04:	08002e45 	.word	0x08002e45
 8002e08:	08002e4d 	.word	0x08002e4d
 8002e0c:	08002e63 	.word	0x08002e63
 8002e10:	08002e53 	.word	0x08002e53
 8002e14:	08002e63 	.word	0x08002e63
 8002e18:	08002e63 	.word	0x08002e63
 8002e1c:	08002e63 	.word	0x08002e63
 8002e20:	08002e5b 	.word	0x08002e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e24:	f7fe ff80 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002e28:	61f8      	str	r0, [r7, #28]
        break;
 8002e2a:	e020      	b.n	8002e6e <UART_SetConfig+0x342>
 8002e2c:	efff69f3 	.word	0xefff69f3
 8002e30:	40008000 	.word	0x40008000
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40004400 	.word	0x40004400
 8002e40:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e44:	f7fe ff86 	bl	8001d54 <HAL_RCC_GetPCLK2Freq>
 8002e48:	61f8      	str	r0, [r7, #28]
        break;
 8002e4a:	e010      	b.n	8002e6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002f80 <UART_SetConfig+0x454>)
 8002e4e:	61fb      	str	r3, [r7, #28]
        break;
 8002e50:	e00d      	b.n	8002e6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e52:	f7fe fed1 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8002e56:	61f8      	str	r0, [r7, #28]
        break;
 8002e58:	e009      	b.n	8002e6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e5e:	61fb      	str	r3, [r7, #28]
        break;
 8002e60:	e005      	b.n	8002e6e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d077      	beq.n	8002f64 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005a      	lsls	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	441a      	add	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	d916      	bls.n	8002ebe <UART_SetConfig+0x392>
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e96:	d212      	bcs.n	8002ebe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f023 030f 	bic.w	r3, r3, #15
 8002ea0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	8afb      	ldrh	r3, [r7, #22]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	8afa      	ldrh	r2, [r7, #22]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	e052      	b.n	8002f64 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ec4:	e04e      	b.n	8002f64 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d827      	bhi.n	8002f1e <UART_SetConfig+0x3f2>
 8002ece:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed4 <UART_SetConfig+0x3a8>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002f01 	.word	0x08002f01
 8002edc:	08002f09 	.word	0x08002f09
 8002ee0:	08002f1f 	.word	0x08002f1f
 8002ee4:	08002f0f 	.word	0x08002f0f
 8002ee8:	08002f1f 	.word	0x08002f1f
 8002eec:	08002f1f 	.word	0x08002f1f
 8002ef0:	08002f1f 	.word	0x08002f1f
 8002ef4:	08002f17 	.word	0x08002f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef8:	f7fe ff16 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002efc:	61f8      	str	r0, [r7, #28]
        break;
 8002efe:	e014      	b.n	8002f2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f00:	f7fe ff28 	bl	8001d54 <HAL_RCC_GetPCLK2Freq>
 8002f04:	61f8      	str	r0, [r7, #28]
        break;
 8002f06:	e010      	b.n	8002f2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <UART_SetConfig+0x454>)
 8002f0a:	61fb      	str	r3, [r7, #28]
        break;
 8002f0c:	e00d      	b.n	8002f2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0e:	f7fe fe73 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8002f12:	61f8      	str	r0, [r7, #28]
        break;
 8002f14:	e009      	b.n	8002f2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f1a:	61fb      	str	r3, [r7, #28]
        break;
 8002f1c:	e005      	b.n	8002f2a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f28:	bf00      	nop
    }

    if (pclk != 0U)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d019      	beq.n	8002f64 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	085a      	lsrs	r2, r3, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	441a      	add	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	d909      	bls.n	8002f5e <UART_SetConfig+0x432>
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f50:	d205      	bcs.n	8002f5e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	e002      	b.n	8002f64 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002f70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3728      	adds	r7, #40	@ 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f7e:	bf00      	nop
 8002f80:	00f42400 	.word	0x00f42400

08002f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01a      	beq.n	800309a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003082:	d10a      	bne.n	800309a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
  }
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b098      	sub	sp, #96	@ 0x60
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030d8:	f7fd fd96 	bl	8000c08 <HAL_GetTick>
 80030dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d12e      	bne.n	800314a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f4:	2200      	movs	r2, #0
 80030f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f88c 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d021      	beq.n	800314a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800311a:	653b      	str	r3, [r7, #80]	@ 0x50
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003124:	647b      	str	r3, [r7, #68]	@ 0x44
 8003126:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800312a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e6      	bne.n	8003106 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e062      	b.n	8003210 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b04      	cmp	r3, #4
 8003156:	d149      	bne.n	80031ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003158:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003160:	2200      	movs	r2, #0
 8003162:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f856 	bl	8003218 <UART_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d03c      	beq.n	80031ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	623b      	str	r3, [r7, #32]
   return(result);
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003190:	633b      	str	r3, [r7, #48]	@ 0x30
 8003192:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e6      	bne.n	8003172 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3308      	adds	r3, #8
 80031aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031c4:	61fa      	str	r2, [r7, #28]
 80031c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	69b9      	ldr	r1, [r7, #24]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	617b      	str	r3, [r7, #20]
   return(result);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e011      	b.n	8003210 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3758      	adds	r7, #88	@ 0x58
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003228:	e04f      	b.n	80032ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d04b      	beq.n	80032ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7fd fce9 	bl	8000c08 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <UART_WaitOnFlagUntilTimeout+0x30>
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e04e      	b.n	80032ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d037      	beq.n	80032ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b80      	cmp	r3, #128	@ 0x80
 800325e:	d034      	beq.n	80032ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b40      	cmp	r3, #64	@ 0x40
 8003264:	d031      	beq.n	80032ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b08      	cmp	r3, #8
 8003272:	d110      	bne.n	8003296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2208      	movs	r2, #8
 800327a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f838 	bl	80032f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2208      	movs	r2, #8
 8003286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e029      	b.n	80032ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032a4:	d111      	bne.n	80032ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f81e 	bl	80032f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e00f      	b.n	80032ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4013      	ands	r3, r2
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	bf0c      	ite	eq
 80032da:	2301      	moveq	r3, #1
 80032dc:	2300      	movne	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d0a0      	beq.n	800322a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b095      	sub	sp, #84	@ 0x54
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800330e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003318:	643b      	str	r3, [r7, #64]	@ 0x40
 800331a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800331e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e6      	bne.n	80032fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3308      	adds	r3, #8
 8003332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	61fb      	str	r3, [r7, #28]
   return(result);
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3308      	adds	r3, #8
 800334a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800334c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800334e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e5      	bne.n	800332c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003364:	2b01      	cmp	r3, #1
 8003366:	d118      	bne.n	800339a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	60bb      	str	r3, [r7, #8]
   return(result);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f023 0310 	bic.w	r3, r3, #16
 800337c:	647b      	str	r3, [r7, #68]	@ 0x44
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	6979      	ldr	r1, [r7, #20]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	613b      	str	r3, [r7, #16]
   return(result);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e6      	bne.n	8003368 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80033ae:	bf00      	nop
 80033b0:	3754      	adds	r7, #84	@ 0x54
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80033c0:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <SysTick_Handler+0x1c>)
 80033c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80033c4:	f000 f998 	bl	80036f8 <xTaskGetSchedulerState>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d001      	beq.n	80033d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80033ce:	f000 fa03 	bl	80037d8 <xPortSysTickHandler>
  }
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	e000e010 	.word	0xe000e010

080033dc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	601a      	str	r2, [r3, #0]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6892      	ldr	r2, [r2, #8]
 800343a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6852      	ldr	r2, [r2, #4]
 8003444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d103      	bne.n	8003458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1e5a      	subs	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003482:	4b4f      	ldr	r3, [pc, #316]	@ (80035c0 <xTaskIncrementTick+0x148>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8090 	bne.w	80035ac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800348c:	4b4d      	ldr	r3, [pc, #308]	@ (80035c4 <xTaskIncrementTick+0x14c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003494:	4a4b      	ldr	r2, [pc, #300]	@ (80035c4 <xTaskIncrementTick+0x14c>)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d121      	bne.n	80034e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80034a0:	4b49      	ldr	r3, [pc, #292]	@ (80035c8 <xTaskIncrementTick+0x150>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	e7fd      	b.n	80034be <xTaskIncrementTick+0x46>
 80034c2:	4b41      	ldr	r3, [pc, #260]	@ (80035c8 <xTaskIncrementTick+0x150>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	4b40      	ldr	r3, [pc, #256]	@ (80035cc <xTaskIncrementTick+0x154>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a3e      	ldr	r2, [pc, #248]	@ (80035c8 <xTaskIncrementTick+0x150>)
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4a3e      	ldr	r2, [pc, #248]	@ (80035cc <xTaskIncrementTick+0x154>)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b3e      	ldr	r3, [pc, #248]	@ (80035d0 <xTaskIncrementTick+0x158>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	4a3c      	ldr	r2, [pc, #240]	@ (80035d0 <xTaskIncrementTick+0x158>)
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	f000 f8ea 	bl	80036b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034e4:	4b3b      	ldr	r3, [pc, #236]	@ (80035d4 <xTaskIncrementTick+0x15c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d349      	bcc.n	8003582 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034ee:	4b36      	ldr	r3, [pc, #216]	@ (80035c8 <xTaskIncrementTick+0x150>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f8:	4b36      	ldr	r3, [pc, #216]	@ (80035d4 <xTaskIncrementTick+0x15c>)
 80034fa:	f04f 32ff 	mov.w	r2, #4294967295
 80034fe:	601a      	str	r2, [r3, #0]
					break;
 8003500:	e03f      	b.n	8003582 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003502:	4b31      	ldr	r3, [pc, #196]	@ (80035c8 <xTaskIncrementTick+0x150>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	d203      	bcs.n	8003522 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800351a:	4a2e      	ldr	r2, [pc, #184]	@ (80035d4 <xTaskIncrementTick+0x15c>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003520:	e02f      	b.n	8003582 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3304      	adds	r3, #4
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff7c 	bl	8003424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3318      	adds	r3, #24
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff73 	bl	8003424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003542:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <xTaskIncrementTick+0x160>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d903      	bls.n	8003552 <xTaskIncrementTick+0xda>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354e:	4a22      	ldr	r2, [pc, #136]	@ (80035d8 <xTaskIncrementTick+0x160>)
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a1f      	ldr	r2, [pc, #124]	@ (80035dc <xTaskIncrementTick+0x164>)
 8003560:	441a      	add	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3304      	adds	r3, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f7ff ff37 	bl	80033dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003572:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <xTaskIncrementTick+0x168>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	429a      	cmp	r2, r3
 800357a:	d3b8      	bcc.n	80034ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800357c:	2301      	movs	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003580:	e7b5      	b.n	80034ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003582:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <xTaskIncrementTick+0x168>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003588:	4914      	ldr	r1, [pc, #80]	@ (80035dc <xTaskIncrementTick+0x164>)
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d901      	bls.n	800359e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800359a:	2301      	movs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800359e:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <xTaskIncrementTick+0x16c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80035a6:	2301      	movs	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e004      	b.n	80035b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80035ac:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <xTaskIncrementTick+0x170>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a0d      	ldr	r2, [pc, #52]	@ (80035e8 <xTaskIncrementTick+0x170>)
 80035b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80035b6:	697b      	ldr	r3, [r7, #20]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	200005e8 	.word	0x200005e8
 80035c4:	200005cc 	.word	0x200005cc
 80035c8:	200005c4 	.word	0x200005c4
 80035cc:	200005c8 	.word	0x200005c8
 80035d0:	200005e0 	.word	0x200005e0
 80035d4:	200005e4 	.word	0x200005e4
 80035d8:	200005d0 	.word	0x200005d0
 80035dc:	20000164 	.word	0x20000164
 80035e0:	20000160 	.word	0x20000160
 80035e4:	200005dc 	.word	0x200005dc
 80035e8:	200005d8 	.word	0x200005d8

080035ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035f2:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <vTaskSwitchContext+0xb4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035fa:	4b2a      	ldr	r3, [pc, #168]	@ (80036a4 <vTaskSwitchContext+0xb8>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003600:	e047      	b.n	8003692 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003602:	4b28      	ldr	r3, [pc, #160]	@ (80036a4 <vTaskSwitchContext+0xb8>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003608:	4b27      	ldr	r3, [pc, #156]	@ (80036a8 <vTaskSwitchContext+0xbc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e011      	b.n	8003634 <vTaskSwitchContext+0x48>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <vTaskSwitchContext+0x42>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	607b      	str	r3, [r7, #4]
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <vTaskSwitchContext+0x3e>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3b01      	subs	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	491d      	ldr	r1, [pc, #116]	@ (80036ac <vTaskSwitchContext+0xc0>)
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0e3      	beq.n	8003610 <vTaskSwitchContext+0x24>
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <vTaskSwitchContext+0xc0>)
 8003654:	4413      	add	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	3308      	adds	r3, #8
 800366a:	429a      	cmp	r2, r3
 800366c:	d104      	bne.n	8003678 <vTaskSwitchContext+0x8c>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4a0c      	ldr	r2, [pc, #48]	@ (80036b0 <vTaskSwitchContext+0xc4>)
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4a09      	ldr	r2, [pc, #36]	@ (80036a8 <vTaskSwitchContext+0xbc>)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003688:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <vTaskSwitchContext+0xc4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3354      	adds	r3, #84	@ 0x54
 800368e:	4a09      	ldr	r2, [pc, #36]	@ (80036b4 <vTaskSwitchContext+0xc8>)
 8003690:	6013      	str	r3, [r2, #0]
}
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	200005e8 	.word	0x200005e8
 80036a4:	200005dc 	.word	0x200005dc
 80036a8:	200005d0 	.word	0x200005d0
 80036ac:	20000164 	.word	0x20000164
 80036b0:	20000160 	.word	0x20000160
 80036b4:	20000018 	.word	0x20000018

080036b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036be:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <prvResetNextTaskUnblockTime+0x38>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036c8:	4b0a      	ldr	r3, [pc, #40]	@ (80036f4 <prvResetNextTaskUnblockTime+0x3c>)
 80036ca:	f04f 32ff 	mov.w	r2, #4294967295
 80036ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036d0:	e008      	b.n	80036e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036d2:	4b07      	ldr	r3, [pc, #28]	@ (80036f0 <prvResetNextTaskUnblockTime+0x38>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <prvResetNextTaskUnblockTime+0x3c>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	200005c4 	.word	0x200005c4
 80036f4:	200005e4 	.word	0x200005e4

080036f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <xTaskGetSchedulerState+0x34>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003706:	2301      	movs	r3, #1
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	e008      	b.n	800371e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800370c:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <xTaskGetSchedulerState+0x38>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003714:	2302      	movs	r3, #2
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	e001      	b.n	800371e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800371e:	687b      	ldr	r3, [r7, #4]
	}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	200005d4 	.word	0x200005d4
 8003730:	200005e8 	.word	0x200005e8
	...

08003740 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003740:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <pxCurrentTCBConst2>)
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	6808      	ldr	r0, [r1, #0]
 8003746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374a:	f380 8809 	msr	PSP, r0
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f04f 0000 	mov.w	r0, #0
 8003756:	f380 8811 	msr	BASEPRI, r0
 800375a:	4770      	bx	lr
 800375c:	f3af 8000 	nop.w

08003760 <pxCurrentTCBConst2>:
 8003760:	20000160 	.word	0x20000160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
	...

08003770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003770:	f3ef 8009 	mrs	r0, PSP
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <pxCurrentTCBConst>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f01e 0f10 	tst.w	lr, #16
 8003780:	bf08      	it	eq
 8003782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800378a:	6010      	str	r0, [r2, #0]
 800378c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003794:	f380 8811 	msr	BASEPRI, r0
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f7ff ff24 	bl	80035ec <vTaskSwitchContext>
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f380 8811 	msr	BASEPRI, r0
 80037ac:	bc09      	pop	{r0, r3}
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	6808      	ldr	r0, [r1, #0]
 80037b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b6:	f01e 0f10 	tst.w	lr, #16
 80037ba:	bf08      	it	eq
 80037bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037c0:	f380 8809 	msr	PSP, r0
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	f3af 8000 	nop.w

080037d0 <pxCurrentTCBConst>:
 80037d0:	20000160 	.word	0x20000160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop

080037d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	607b      	str	r3, [r7, #4]
}
 80037f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037f2:	f7ff fe41 	bl	8003478 <xTaskIncrementTick>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <xPortSysTickHandler+0x40>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800380e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <std>:
 800381c:	2300      	movs	r3, #0
 800381e:	b510      	push	{r4, lr}
 8003820:	4604      	mov	r4, r0
 8003822:	e9c0 3300 	strd	r3, r3, [r0]
 8003826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800382a:	6083      	str	r3, [r0, #8]
 800382c:	8181      	strh	r1, [r0, #12]
 800382e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003830:	81c2      	strh	r2, [r0, #14]
 8003832:	6183      	str	r3, [r0, #24]
 8003834:	4619      	mov	r1, r3
 8003836:	2208      	movs	r2, #8
 8003838:	305c      	adds	r0, #92	@ 0x5c
 800383a:	f000 f906 	bl	8003a4a <memset>
 800383e:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <std+0x58>)
 8003840:	6263      	str	r3, [r4, #36]	@ 0x24
 8003842:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <std+0x5c>)
 8003844:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003846:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <std+0x60>)
 8003848:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800384a:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <std+0x64>)
 800384c:	6323      	str	r3, [r4, #48]	@ 0x30
 800384e:	4b0d      	ldr	r3, [pc, #52]	@ (8003884 <std+0x68>)
 8003850:	6224      	str	r4, [r4, #32]
 8003852:	429c      	cmp	r4, r3
 8003854:	d006      	beq.n	8003864 <std+0x48>
 8003856:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800385a:	4294      	cmp	r4, r2
 800385c:	d002      	beq.n	8003864 <std+0x48>
 800385e:	33d0      	adds	r3, #208	@ 0xd0
 8003860:	429c      	cmp	r4, r3
 8003862:	d105      	bne.n	8003870 <std+0x54>
 8003864:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800386c:	f000 b966 	b.w	8003b3c <__retarget_lock_init_recursive>
 8003870:	bd10      	pop	{r4, pc}
 8003872:	bf00      	nop
 8003874:	080039c5 	.word	0x080039c5
 8003878:	080039e7 	.word	0x080039e7
 800387c:	08003a1f 	.word	0x08003a1f
 8003880:	08003a43 	.word	0x08003a43
 8003884:	200005ec 	.word	0x200005ec

08003888 <stdio_exit_handler>:
 8003888:	4a02      	ldr	r2, [pc, #8]	@ (8003894 <stdio_exit_handler+0xc>)
 800388a:	4903      	ldr	r1, [pc, #12]	@ (8003898 <stdio_exit_handler+0x10>)
 800388c:	4803      	ldr	r0, [pc, #12]	@ (800389c <stdio_exit_handler+0x14>)
 800388e:	f000 b869 	b.w	8003964 <_fwalk_sglue>
 8003892:	bf00      	nop
 8003894:	2000000c 	.word	0x2000000c
 8003898:	080043d9 	.word	0x080043d9
 800389c:	2000001c 	.word	0x2000001c

080038a0 <cleanup_stdio>:
 80038a0:	6841      	ldr	r1, [r0, #4]
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <cleanup_stdio+0x34>)
 80038a4:	4299      	cmp	r1, r3
 80038a6:	b510      	push	{r4, lr}
 80038a8:	4604      	mov	r4, r0
 80038aa:	d001      	beq.n	80038b0 <cleanup_stdio+0x10>
 80038ac:	f000 fd94 	bl	80043d8 <_fflush_r>
 80038b0:	68a1      	ldr	r1, [r4, #8]
 80038b2:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <cleanup_stdio+0x38>)
 80038b4:	4299      	cmp	r1, r3
 80038b6:	d002      	beq.n	80038be <cleanup_stdio+0x1e>
 80038b8:	4620      	mov	r0, r4
 80038ba:	f000 fd8d 	bl	80043d8 <_fflush_r>
 80038be:	68e1      	ldr	r1, [r4, #12]
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <cleanup_stdio+0x3c>)
 80038c2:	4299      	cmp	r1, r3
 80038c4:	d004      	beq.n	80038d0 <cleanup_stdio+0x30>
 80038c6:	4620      	mov	r0, r4
 80038c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038cc:	f000 bd84 	b.w	80043d8 <_fflush_r>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	bf00      	nop
 80038d4:	200005ec 	.word	0x200005ec
 80038d8:	20000654 	.word	0x20000654
 80038dc:	200006bc 	.word	0x200006bc

080038e0 <global_stdio_init.part.0>:
 80038e0:	b510      	push	{r4, lr}
 80038e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <global_stdio_init.part.0+0x30>)
 80038e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003914 <global_stdio_init.part.0+0x34>)
 80038e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003918 <global_stdio_init.part.0+0x38>)
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	4620      	mov	r0, r4
 80038ec:	2200      	movs	r2, #0
 80038ee:	2104      	movs	r1, #4
 80038f0:	f7ff ff94 	bl	800381c <std>
 80038f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038f8:	2201      	movs	r2, #1
 80038fa:	2109      	movs	r1, #9
 80038fc:	f7ff ff8e 	bl	800381c <std>
 8003900:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003904:	2202      	movs	r2, #2
 8003906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800390a:	2112      	movs	r1, #18
 800390c:	f7ff bf86 	b.w	800381c <std>
 8003910:	20000724 	.word	0x20000724
 8003914:	200005ec 	.word	0x200005ec
 8003918:	08003889 	.word	0x08003889

0800391c <__sfp_lock_acquire>:
 800391c:	4801      	ldr	r0, [pc, #4]	@ (8003924 <__sfp_lock_acquire+0x8>)
 800391e:	f000 b90e 	b.w	8003b3e <__retarget_lock_acquire_recursive>
 8003922:	bf00      	nop
 8003924:	2000072d 	.word	0x2000072d

08003928 <__sfp_lock_release>:
 8003928:	4801      	ldr	r0, [pc, #4]	@ (8003930 <__sfp_lock_release+0x8>)
 800392a:	f000 b909 	b.w	8003b40 <__retarget_lock_release_recursive>
 800392e:	bf00      	nop
 8003930:	2000072d 	.word	0x2000072d

08003934 <__sinit>:
 8003934:	b510      	push	{r4, lr}
 8003936:	4604      	mov	r4, r0
 8003938:	f7ff fff0 	bl	800391c <__sfp_lock_acquire>
 800393c:	6a23      	ldr	r3, [r4, #32]
 800393e:	b11b      	cbz	r3, 8003948 <__sinit+0x14>
 8003940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003944:	f7ff bff0 	b.w	8003928 <__sfp_lock_release>
 8003948:	4b04      	ldr	r3, [pc, #16]	@ (800395c <__sinit+0x28>)
 800394a:	6223      	str	r3, [r4, #32]
 800394c:	4b04      	ldr	r3, [pc, #16]	@ (8003960 <__sinit+0x2c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f5      	bne.n	8003940 <__sinit+0xc>
 8003954:	f7ff ffc4 	bl	80038e0 <global_stdio_init.part.0>
 8003958:	e7f2      	b.n	8003940 <__sinit+0xc>
 800395a:	bf00      	nop
 800395c:	080038a1 	.word	0x080038a1
 8003960:	20000724 	.word	0x20000724

08003964 <_fwalk_sglue>:
 8003964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003968:	4607      	mov	r7, r0
 800396a:	4688      	mov	r8, r1
 800396c:	4614      	mov	r4, r2
 800396e:	2600      	movs	r6, #0
 8003970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003974:	f1b9 0901 	subs.w	r9, r9, #1
 8003978:	d505      	bpl.n	8003986 <_fwalk_sglue+0x22>
 800397a:	6824      	ldr	r4, [r4, #0]
 800397c:	2c00      	cmp	r4, #0
 800397e:	d1f7      	bne.n	8003970 <_fwalk_sglue+0xc>
 8003980:	4630      	mov	r0, r6
 8003982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003986:	89ab      	ldrh	r3, [r5, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d907      	bls.n	800399c <_fwalk_sglue+0x38>
 800398c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003990:	3301      	adds	r3, #1
 8003992:	d003      	beq.n	800399c <_fwalk_sglue+0x38>
 8003994:	4629      	mov	r1, r5
 8003996:	4638      	mov	r0, r7
 8003998:	47c0      	blx	r8
 800399a:	4306      	orrs	r6, r0
 800399c:	3568      	adds	r5, #104	@ 0x68
 800399e:	e7e9      	b.n	8003974 <_fwalk_sglue+0x10>

080039a0 <iprintf>:
 80039a0:	b40f      	push	{r0, r1, r2, r3}
 80039a2:	b507      	push	{r0, r1, r2, lr}
 80039a4:	4906      	ldr	r1, [pc, #24]	@ (80039c0 <iprintf+0x20>)
 80039a6:	ab04      	add	r3, sp, #16
 80039a8:	6808      	ldr	r0, [r1, #0]
 80039aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ae:	6881      	ldr	r1, [r0, #8]
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	f000 f9e9 	bl	8003d88 <_vfiprintf_r>
 80039b6:	b003      	add	sp, #12
 80039b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039bc:	b004      	add	sp, #16
 80039be:	4770      	bx	lr
 80039c0:	20000018 	.word	0x20000018

080039c4 <__sread>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	460c      	mov	r4, r1
 80039c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039cc:	f000 f868 	bl	8003aa0 <_read_r>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	bfab      	itete	ge
 80039d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039d6:	89a3      	ldrhlt	r3, [r4, #12]
 80039d8:	181b      	addge	r3, r3, r0
 80039da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039de:	bfac      	ite	ge
 80039e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039e2:	81a3      	strhlt	r3, [r4, #12]
 80039e4:	bd10      	pop	{r4, pc}

080039e6 <__swrite>:
 80039e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ea:	461f      	mov	r7, r3
 80039ec:	898b      	ldrh	r3, [r1, #12]
 80039ee:	05db      	lsls	r3, r3, #23
 80039f0:	4605      	mov	r5, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	4616      	mov	r6, r2
 80039f6:	d505      	bpl.n	8003a04 <__swrite+0x1e>
 80039f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039fc:	2302      	movs	r3, #2
 80039fe:	2200      	movs	r2, #0
 8003a00:	f000 f83c 	bl	8003a7c <_lseek_r>
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	4632      	mov	r2, r6
 8003a12:	463b      	mov	r3, r7
 8003a14:	4628      	mov	r0, r5
 8003a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1a:	f000 b853 	b.w	8003ac4 <_write_r>

08003a1e <__sseek>:
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	460c      	mov	r4, r1
 8003a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a26:	f000 f829 	bl	8003a7c <_lseek_r>
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	bf15      	itete	ne
 8003a30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a3a:	81a3      	strheq	r3, [r4, #12]
 8003a3c:	bf18      	it	ne
 8003a3e:	81a3      	strhne	r3, [r4, #12]
 8003a40:	bd10      	pop	{r4, pc}

08003a42 <__sclose>:
 8003a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a46:	f000 b809 	b.w	8003a5c <_close_r>

08003a4a <memset>:
 8003a4a:	4402      	add	r2, r0
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d100      	bne.n	8003a54 <memset+0xa>
 8003a52:	4770      	bx	lr
 8003a54:	f803 1b01 	strb.w	r1, [r3], #1
 8003a58:	e7f9      	b.n	8003a4e <memset+0x4>
	...

08003a5c <_close_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4d06      	ldr	r5, [pc, #24]	@ (8003a78 <_close_r+0x1c>)
 8003a60:	2300      	movs	r3, #0
 8003a62:	4604      	mov	r4, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	602b      	str	r3, [r5, #0]
 8003a68:	f7fc fffb 	bl	8000a62 <_close>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_close_r+0x1a>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_close_r+0x1a>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	20000728 	.word	0x20000728

08003a7c <_lseek_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4d07      	ldr	r5, [pc, #28]	@ (8003a9c <_lseek_r+0x20>)
 8003a80:	4604      	mov	r4, r0
 8003a82:	4608      	mov	r0, r1
 8003a84:	4611      	mov	r1, r2
 8003a86:	2200      	movs	r2, #0
 8003a88:	602a      	str	r2, [r5, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f7fd f810 	bl	8000ab0 <_lseek>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_lseek_r+0x1e>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_lseek_r+0x1e>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	20000728 	.word	0x20000728

08003aa0 <_read_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4d07      	ldr	r5, [pc, #28]	@ (8003ac0 <_read_r+0x20>)
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	602a      	str	r2, [r5, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f7fc ff9e 	bl	80009f0 <_read>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_read_r+0x1e>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_read_r+0x1e>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	20000728 	.word	0x20000728

08003ac4 <_write_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4d07      	ldr	r5, [pc, #28]	@ (8003ae4 <_write_r+0x20>)
 8003ac8:	4604      	mov	r4, r0
 8003aca:	4608      	mov	r0, r1
 8003acc:	4611      	mov	r1, r2
 8003ace:	2200      	movs	r2, #0
 8003ad0:	602a      	str	r2, [r5, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f7fc ffa9 	bl	8000a2a <_write>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d102      	bne.n	8003ae2 <_write_r+0x1e>
 8003adc:	682b      	ldr	r3, [r5, #0]
 8003ade:	b103      	cbz	r3, 8003ae2 <_write_r+0x1e>
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	20000728 	.word	0x20000728

08003ae8 <__errno>:
 8003ae8:	4b01      	ldr	r3, [pc, #4]	@ (8003af0 <__errno+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000018 	.word	0x20000018

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4d0d      	ldr	r5, [pc, #52]	@ (8003b2c <__libc_init_array+0x38>)
 8003af8:	4c0d      	ldr	r4, [pc, #52]	@ (8003b30 <__libc_init_array+0x3c>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	2600      	movs	r6, #0
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	4d0b      	ldr	r5, [pc, #44]	@ (8003b34 <__libc_init_array+0x40>)
 8003b06:	4c0c      	ldr	r4, [pc, #48]	@ (8003b38 <__libc_init_array+0x44>)
 8003b08:	f000 fdb6 	bl	8004678 <_init>
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	2600      	movs	r6, #0
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	08004724 	.word	0x08004724
 8003b30:	08004724 	.word	0x08004724
 8003b34:	08004724 	.word	0x08004724
 8003b38:	08004728 	.word	0x08004728

08003b3c <__retarget_lock_init_recursive>:
 8003b3c:	4770      	bx	lr

08003b3e <__retarget_lock_acquire_recursive>:
 8003b3e:	4770      	bx	lr

08003b40 <__retarget_lock_release_recursive>:
 8003b40:	4770      	bx	lr
	...

08003b44 <_free_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4605      	mov	r5, r0
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	d041      	beq.n	8003bd0 <_free_r+0x8c>
 8003b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b50:	1f0c      	subs	r4, r1, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfb8      	it	lt
 8003b56:	18e4      	addlt	r4, r4, r3
 8003b58:	f000 f8e0 	bl	8003d1c <__malloc_lock>
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <_free_r+0x90>)
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	b933      	cbnz	r3, 8003b70 <_free_r+0x2c>
 8003b62:	6063      	str	r3, [r4, #4]
 8003b64:	6014      	str	r4, [r2, #0]
 8003b66:	4628      	mov	r0, r5
 8003b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b6c:	f000 b8dc 	b.w	8003d28 <__malloc_unlock>
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	d908      	bls.n	8003b86 <_free_r+0x42>
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	1821      	adds	r1, r4, r0
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	bf01      	itttt	eq
 8003b7c:	6819      	ldreq	r1, [r3, #0]
 8003b7e:	685b      	ldreq	r3, [r3, #4]
 8003b80:	1809      	addeq	r1, r1, r0
 8003b82:	6021      	streq	r1, [r4, #0]
 8003b84:	e7ed      	b.n	8003b62 <_free_r+0x1e>
 8003b86:	461a      	mov	r2, r3
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	b10b      	cbz	r3, 8003b90 <_free_r+0x4c>
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	d9fa      	bls.n	8003b86 <_free_r+0x42>
 8003b90:	6811      	ldr	r1, [r2, #0]
 8003b92:	1850      	adds	r0, r2, r1
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d10b      	bne.n	8003bb0 <_free_r+0x6c>
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	4401      	add	r1, r0
 8003b9c:	1850      	adds	r0, r2, r1
 8003b9e:	4283      	cmp	r3, r0
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	d1e0      	bne.n	8003b66 <_free_r+0x22>
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	6053      	str	r3, [r2, #4]
 8003baa:	4408      	add	r0, r1
 8003bac:	6010      	str	r0, [r2, #0]
 8003bae:	e7da      	b.n	8003b66 <_free_r+0x22>
 8003bb0:	d902      	bls.n	8003bb8 <_free_r+0x74>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	e7d6      	b.n	8003b66 <_free_r+0x22>
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	1821      	adds	r1, r4, r0
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	bf04      	itt	eq
 8003bc0:	6819      	ldreq	r1, [r3, #0]
 8003bc2:	685b      	ldreq	r3, [r3, #4]
 8003bc4:	6063      	str	r3, [r4, #4]
 8003bc6:	bf04      	itt	eq
 8003bc8:	1809      	addeq	r1, r1, r0
 8003bca:	6021      	streq	r1, [r4, #0]
 8003bcc:	6054      	str	r4, [r2, #4]
 8003bce:	e7ca      	b.n	8003b66 <_free_r+0x22>
 8003bd0:	bd38      	pop	{r3, r4, r5, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000734 	.word	0x20000734

08003bd8 <sbrk_aligned>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4e0f      	ldr	r6, [pc, #60]	@ (8003c18 <sbrk_aligned+0x40>)
 8003bdc:	460c      	mov	r4, r1
 8003bde:	6831      	ldr	r1, [r6, #0]
 8003be0:	4605      	mov	r5, r0
 8003be2:	b911      	cbnz	r1, 8003bea <sbrk_aligned+0x12>
 8003be4:	f000 fcb4 	bl	8004550 <_sbrk_r>
 8003be8:	6030      	str	r0, [r6, #0]
 8003bea:	4621      	mov	r1, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 fcaf 	bl	8004550 <_sbrk_r>
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	d103      	bne.n	8003bfe <sbrk_aligned+0x26>
 8003bf6:	f04f 34ff 	mov.w	r4, #4294967295
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	bd70      	pop	{r4, r5, r6, pc}
 8003bfe:	1cc4      	adds	r4, r0, #3
 8003c00:	f024 0403 	bic.w	r4, r4, #3
 8003c04:	42a0      	cmp	r0, r4
 8003c06:	d0f8      	beq.n	8003bfa <sbrk_aligned+0x22>
 8003c08:	1a21      	subs	r1, r4, r0
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f000 fca0 	bl	8004550 <_sbrk_r>
 8003c10:	3001      	adds	r0, #1
 8003c12:	d1f2      	bne.n	8003bfa <sbrk_aligned+0x22>
 8003c14:	e7ef      	b.n	8003bf6 <sbrk_aligned+0x1e>
 8003c16:	bf00      	nop
 8003c18:	20000730 	.word	0x20000730

08003c1c <_malloc_r>:
 8003c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c20:	1ccd      	adds	r5, r1, #3
 8003c22:	f025 0503 	bic.w	r5, r5, #3
 8003c26:	3508      	adds	r5, #8
 8003c28:	2d0c      	cmp	r5, #12
 8003c2a:	bf38      	it	cc
 8003c2c:	250c      	movcc	r5, #12
 8003c2e:	2d00      	cmp	r5, #0
 8003c30:	4606      	mov	r6, r0
 8003c32:	db01      	blt.n	8003c38 <_malloc_r+0x1c>
 8003c34:	42a9      	cmp	r1, r5
 8003c36:	d904      	bls.n	8003c42 <_malloc_r+0x26>
 8003c38:	230c      	movs	r3, #12
 8003c3a:	6033      	str	r3, [r6, #0]
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d18 <_malloc_r+0xfc>
 8003c46:	f000 f869 	bl	8003d1c <__malloc_lock>
 8003c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c4e:	461c      	mov	r4, r3
 8003c50:	bb44      	cbnz	r4, 8003ca4 <_malloc_r+0x88>
 8003c52:	4629      	mov	r1, r5
 8003c54:	4630      	mov	r0, r6
 8003c56:	f7ff ffbf 	bl	8003bd8 <sbrk_aligned>
 8003c5a:	1c43      	adds	r3, r0, #1
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	d158      	bne.n	8003d12 <_malloc_r+0xf6>
 8003c60:	f8d8 4000 	ldr.w	r4, [r8]
 8003c64:	4627      	mov	r7, r4
 8003c66:	2f00      	cmp	r7, #0
 8003c68:	d143      	bne.n	8003cf2 <_malloc_r+0xd6>
 8003c6a:	2c00      	cmp	r4, #0
 8003c6c:	d04b      	beq.n	8003d06 <_malloc_r+0xea>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	4639      	mov	r1, r7
 8003c72:	4630      	mov	r0, r6
 8003c74:	eb04 0903 	add.w	r9, r4, r3
 8003c78:	f000 fc6a 	bl	8004550 <_sbrk_r>
 8003c7c:	4581      	cmp	r9, r0
 8003c7e:	d142      	bne.n	8003d06 <_malloc_r+0xea>
 8003c80:	6821      	ldr	r1, [r4, #0]
 8003c82:	1a6d      	subs	r5, r5, r1
 8003c84:	4629      	mov	r1, r5
 8003c86:	4630      	mov	r0, r6
 8003c88:	f7ff ffa6 	bl	8003bd8 <sbrk_aligned>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d03a      	beq.n	8003d06 <_malloc_r+0xea>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	442b      	add	r3, r5
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	f8d8 3000 	ldr.w	r3, [r8]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	bb62      	cbnz	r2, 8003cf8 <_malloc_r+0xdc>
 8003c9e:	f8c8 7000 	str.w	r7, [r8]
 8003ca2:	e00f      	b.n	8003cc4 <_malloc_r+0xa8>
 8003ca4:	6822      	ldr	r2, [r4, #0]
 8003ca6:	1b52      	subs	r2, r2, r5
 8003ca8:	d420      	bmi.n	8003cec <_malloc_r+0xd0>
 8003caa:	2a0b      	cmp	r2, #11
 8003cac:	d917      	bls.n	8003cde <_malloc_r+0xc2>
 8003cae:	1961      	adds	r1, r4, r5
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	6025      	str	r5, [r4, #0]
 8003cb4:	bf18      	it	ne
 8003cb6:	6059      	strne	r1, [r3, #4]
 8003cb8:	6863      	ldr	r3, [r4, #4]
 8003cba:	bf08      	it	eq
 8003cbc:	f8c8 1000 	streq.w	r1, [r8]
 8003cc0:	5162      	str	r2, [r4, r5]
 8003cc2:	604b      	str	r3, [r1, #4]
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f000 f82f 	bl	8003d28 <__malloc_unlock>
 8003cca:	f104 000b 	add.w	r0, r4, #11
 8003cce:	1d23      	adds	r3, r4, #4
 8003cd0:	f020 0007 	bic.w	r0, r0, #7
 8003cd4:	1ac2      	subs	r2, r0, r3
 8003cd6:	bf1c      	itt	ne
 8003cd8:	1a1b      	subne	r3, r3, r0
 8003cda:	50a3      	strne	r3, [r4, r2]
 8003cdc:	e7af      	b.n	8003c3e <_malloc_r+0x22>
 8003cde:	6862      	ldr	r2, [r4, #4]
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	bf0c      	ite	eq
 8003ce4:	f8c8 2000 	streq.w	r2, [r8]
 8003ce8:	605a      	strne	r2, [r3, #4]
 8003cea:	e7eb      	b.n	8003cc4 <_malloc_r+0xa8>
 8003cec:	4623      	mov	r3, r4
 8003cee:	6864      	ldr	r4, [r4, #4]
 8003cf0:	e7ae      	b.n	8003c50 <_malloc_r+0x34>
 8003cf2:	463c      	mov	r4, r7
 8003cf4:	687f      	ldr	r7, [r7, #4]
 8003cf6:	e7b6      	b.n	8003c66 <_malloc_r+0x4a>
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	d1fb      	bne.n	8003cf8 <_malloc_r+0xdc>
 8003d00:	2300      	movs	r3, #0
 8003d02:	6053      	str	r3, [r2, #4]
 8003d04:	e7de      	b.n	8003cc4 <_malloc_r+0xa8>
 8003d06:	230c      	movs	r3, #12
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f000 f80c 	bl	8003d28 <__malloc_unlock>
 8003d10:	e794      	b.n	8003c3c <_malloc_r+0x20>
 8003d12:	6005      	str	r5, [r0, #0]
 8003d14:	e7d6      	b.n	8003cc4 <_malloc_r+0xa8>
 8003d16:	bf00      	nop
 8003d18:	20000734 	.word	0x20000734

08003d1c <__malloc_lock>:
 8003d1c:	4801      	ldr	r0, [pc, #4]	@ (8003d24 <__malloc_lock+0x8>)
 8003d1e:	f7ff bf0e 	b.w	8003b3e <__retarget_lock_acquire_recursive>
 8003d22:	bf00      	nop
 8003d24:	2000072c 	.word	0x2000072c

08003d28 <__malloc_unlock>:
 8003d28:	4801      	ldr	r0, [pc, #4]	@ (8003d30 <__malloc_unlock+0x8>)
 8003d2a:	f7ff bf09 	b.w	8003b40 <__retarget_lock_release_recursive>
 8003d2e:	bf00      	nop
 8003d30:	2000072c 	.word	0x2000072c

08003d34 <__sfputc_r>:
 8003d34:	6893      	ldr	r3, [r2, #8]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	b410      	push	{r4}
 8003d3c:	6093      	str	r3, [r2, #8]
 8003d3e:	da08      	bge.n	8003d52 <__sfputc_r+0x1e>
 8003d40:	6994      	ldr	r4, [r2, #24]
 8003d42:	42a3      	cmp	r3, r4
 8003d44:	db01      	blt.n	8003d4a <__sfputc_r+0x16>
 8003d46:	290a      	cmp	r1, #10
 8003d48:	d103      	bne.n	8003d52 <__sfputc_r+0x1e>
 8003d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d4e:	f000 bb6b 	b.w	8004428 <__swbuf_r>
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	1c58      	adds	r0, r3, #1
 8003d56:	6010      	str	r0, [r2, #0]
 8003d58:	7019      	strb	r1, [r3, #0]
 8003d5a:	4608      	mov	r0, r1
 8003d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <__sfputs_r>:
 8003d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d64:	4606      	mov	r6, r0
 8003d66:	460f      	mov	r7, r1
 8003d68:	4614      	mov	r4, r2
 8003d6a:	18d5      	adds	r5, r2, r3
 8003d6c:	42ac      	cmp	r4, r5
 8003d6e:	d101      	bne.n	8003d74 <__sfputs_r+0x12>
 8003d70:	2000      	movs	r0, #0
 8003d72:	e007      	b.n	8003d84 <__sfputs_r+0x22>
 8003d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d78:	463a      	mov	r2, r7
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f7ff ffda 	bl	8003d34 <__sfputc_r>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d1f3      	bne.n	8003d6c <__sfputs_r+0xa>
 8003d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d88 <_vfiprintf_r>:
 8003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	460d      	mov	r5, r1
 8003d8e:	b09d      	sub	sp, #116	@ 0x74
 8003d90:	4614      	mov	r4, r2
 8003d92:	4698      	mov	r8, r3
 8003d94:	4606      	mov	r6, r0
 8003d96:	b118      	cbz	r0, 8003da0 <_vfiprintf_r+0x18>
 8003d98:	6a03      	ldr	r3, [r0, #32]
 8003d9a:	b90b      	cbnz	r3, 8003da0 <_vfiprintf_r+0x18>
 8003d9c:	f7ff fdca 	bl	8003934 <__sinit>
 8003da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003da2:	07d9      	lsls	r1, r3, #31
 8003da4:	d405      	bmi.n	8003db2 <_vfiprintf_r+0x2a>
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	059a      	lsls	r2, r3, #22
 8003daa:	d402      	bmi.n	8003db2 <_vfiprintf_r+0x2a>
 8003dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dae:	f7ff fec6 	bl	8003b3e <__retarget_lock_acquire_recursive>
 8003db2:	89ab      	ldrh	r3, [r5, #12]
 8003db4:	071b      	lsls	r3, r3, #28
 8003db6:	d501      	bpl.n	8003dbc <_vfiprintf_r+0x34>
 8003db8:	692b      	ldr	r3, [r5, #16]
 8003dba:	b99b      	cbnz	r3, 8003de4 <_vfiprintf_r+0x5c>
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	f000 fb70 	bl	80044a4 <__swsetup_r>
 8003dc4:	b170      	cbz	r0, 8003de4 <_vfiprintf_r+0x5c>
 8003dc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003dc8:	07dc      	lsls	r4, r3, #31
 8003dca:	d504      	bpl.n	8003dd6 <_vfiprintf_r+0x4e>
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	b01d      	add	sp, #116	@ 0x74
 8003dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd6:	89ab      	ldrh	r3, [r5, #12]
 8003dd8:	0598      	lsls	r0, r3, #22
 8003dda:	d4f7      	bmi.n	8003dcc <_vfiprintf_r+0x44>
 8003ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dde:	f7ff feaf 	bl	8003b40 <__retarget_lock_release_recursive>
 8003de2:	e7f3      	b.n	8003dcc <_vfiprintf_r+0x44>
 8003de4:	2300      	movs	r3, #0
 8003de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003de8:	2320      	movs	r3, #32
 8003dea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8003df2:	2330      	movs	r3, #48	@ 0x30
 8003df4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003fa4 <_vfiprintf_r+0x21c>
 8003df8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dfc:	f04f 0901 	mov.w	r9, #1
 8003e00:	4623      	mov	r3, r4
 8003e02:	469a      	mov	sl, r3
 8003e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e08:	b10a      	cbz	r2, 8003e0e <_vfiprintf_r+0x86>
 8003e0a:	2a25      	cmp	r2, #37	@ 0x25
 8003e0c:	d1f9      	bne.n	8003e02 <_vfiprintf_r+0x7a>
 8003e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8003e12:	d00b      	beq.n	8003e2c <_vfiprintf_r+0xa4>
 8003e14:	465b      	mov	r3, fp
 8003e16:	4622      	mov	r2, r4
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f7ff ffa1 	bl	8003d62 <__sfputs_r>
 8003e20:	3001      	adds	r0, #1
 8003e22:	f000 80a7 	beq.w	8003f74 <_vfiprintf_r+0x1ec>
 8003e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e28:	445a      	add	r2, fp
 8003e2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 809f 	beq.w	8003f74 <_vfiprintf_r+0x1ec>
 8003e36:	2300      	movs	r3, #0
 8003e38:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e40:	f10a 0a01 	add.w	sl, sl, #1
 8003e44:	9304      	str	r3, [sp, #16]
 8003e46:	9307      	str	r3, [sp, #28]
 8003e48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e4e:	4654      	mov	r4, sl
 8003e50:	2205      	movs	r2, #5
 8003e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e56:	4853      	ldr	r0, [pc, #332]	@ (8003fa4 <_vfiprintf_r+0x21c>)
 8003e58:	f7fc f9ba 	bl	80001d0 <memchr>
 8003e5c:	9a04      	ldr	r2, [sp, #16]
 8003e5e:	b9d8      	cbnz	r0, 8003e98 <_vfiprintf_r+0x110>
 8003e60:	06d1      	lsls	r1, r2, #27
 8003e62:	bf44      	itt	mi
 8003e64:	2320      	movmi	r3, #32
 8003e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e6a:	0713      	lsls	r3, r2, #28
 8003e6c:	bf44      	itt	mi
 8003e6e:	232b      	movmi	r3, #43	@ 0x2b
 8003e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e74:	f89a 3000 	ldrb.w	r3, [sl]
 8003e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e7a:	d015      	beq.n	8003ea8 <_vfiprintf_r+0x120>
 8003e7c:	9a07      	ldr	r2, [sp, #28]
 8003e7e:	4654      	mov	r4, sl
 8003e80:	2000      	movs	r0, #0
 8003e82:	f04f 0c0a 	mov.w	ip, #10
 8003e86:	4621      	mov	r1, r4
 8003e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e8c:	3b30      	subs	r3, #48	@ 0x30
 8003e8e:	2b09      	cmp	r3, #9
 8003e90:	d94b      	bls.n	8003f2a <_vfiprintf_r+0x1a2>
 8003e92:	b1b0      	cbz	r0, 8003ec2 <_vfiprintf_r+0x13a>
 8003e94:	9207      	str	r2, [sp, #28]
 8003e96:	e014      	b.n	8003ec2 <_vfiprintf_r+0x13a>
 8003e98:	eba0 0308 	sub.w	r3, r0, r8
 8003e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	9304      	str	r3, [sp, #16]
 8003ea4:	46a2      	mov	sl, r4
 8003ea6:	e7d2      	b.n	8003e4e <_vfiprintf_r+0xc6>
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	1d19      	adds	r1, r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	9103      	str	r1, [sp, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bfbb      	ittet	lt
 8003eb4:	425b      	neglt	r3, r3
 8003eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8003eba:	9307      	strge	r3, [sp, #28]
 8003ebc:	9307      	strlt	r3, [sp, #28]
 8003ebe:	bfb8      	it	lt
 8003ec0:	9204      	strlt	r2, [sp, #16]
 8003ec2:	7823      	ldrb	r3, [r4, #0]
 8003ec4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ec6:	d10a      	bne.n	8003ede <_vfiprintf_r+0x156>
 8003ec8:	7863      	ldrb	r3, [r4, #1]
 8003eca:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ecc:	d132      	bne.n	8003f34 <_vfiprintf_r+0x1ac>
 8003ece:	9b03      	ldr	r3, [sp, #12]
 8003ed0:	1d1a      	adds	r2, r3, #4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	9203      	str	r2, [sp, #12]
 8003ed6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003eda:	3402      	adds	r4, #2
 8003edc:	9305      	str	r3, [sp, #20]
 8003ede:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003fb4 <_vfiprintf_r+0x22c>
 8003ee2:	7821      	ldrb	r1, [r4, #0]
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	f7fc f972 	bl	80001d0 <memchr>
 8003eec:	b138      	cbz	r0, 8003efe <_vfiprintf_r+0x176>
 8003eee:	9b04      	ldr	r3, [sp, #16]
 8003ef0:	eba0 000a 	sub.w	r0, r0, sl
 8003ef4:	2240      	movs	r2, #64	@ 0x40
 8003ef6:	4082      	lsls	r2, r0
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	3401      	adds	r4, #1
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f02:	4829      	ldr	r0, [pc, #164]	@ (8003fa8 <_vfiprintf_r+0x220>)
 8003f04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f08:	2206      	movs	r2, #6
 8003f0a:	f7fc f961 	bl	80001d0 <memchr>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d03f      	beq.n	8003f92 <_vfiprintf_r+0x20a>
 8003f12:	4b26      	ldr	r3, [pc, #152]	@ (8003fac <_vfiprintf_r+0x224>)
 8003f14:	bb1b      	cbnz	r3, 8003f5e <_vfiprintf_r+0x1d6>
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	3307      	adds	r3, #7
 8003f1a:	f023 0307 	bic.w	r3, r3, #7
 8003f1e:	3308      	adds	r3, #8
 8003f20:	9303      	str	r3, [sp, #12]
 8003f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f24:	443b      	add	r3, r7
 8003f26:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f28:	e76a      	b.n	8003e00 <_vfiprintf_r+0x78>
 8003f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f2e:	460c      	mov	r4, r1
 8003f30:	2001      	movs	r0, #1
 8003f32:	e7a8      	b.n	8003e86 <_vfiprintf_r+0xfe>
 8003f34:	2300      	movs	r3, #0
 8003f36:	3401      	adds	r4, #1
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f04f 0c0a 	mov.w	ip, #10
 8003f40:	4620      	mov	r0, r4
 8003f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f46:	3a30      	subs	r2, #48	@ 0x30
 8003f48:	2a09      	cmp	r2, #9
 8003f4a:	d903      	bls.n	8003f54 <_vfiprintf_r+0x1cc>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0c6      	beq.n	8003ede <_vfiprintf_r+0x156>
 8003f50:	9105      	str	r1, [sp, #20]
 8003f52:	e7c4      	b.n	8003ede <_vfiprintf_r+0x156>
 8003f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f58:	4604      	mov	r4, r0
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e7f0      	b.n	8003f40 <_vfiprintf_r+0x1b8>
 8003f5e:	ab03      	add	r3, sp, #12
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	462a      	mov	r2, r5
 8003f64:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <_vfiprintf_r+0x228>)
 8003f66:	a904      	add	r1, sp, #16
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f3af 8000 	nop.w
 8003f6e:	4607      	mov	r7, r0
 8003f70:	1c78      	adds	r0, r7, #1
 8003f72:	d1d6      	bne.n	8003f22 <_vfiprintf_r+0x19a>
 8003f74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f76:	07d9      	lsls	r1, r3, #31
 8003f78:	d405      	bmi.n	8003f86 <_vfiprintf_r+0x1fe>
 8003f7a:	89ab      	ldrh	r3, [r5, #12]
 8003f7c:	059a      	lsls	r2, r3, #22
 8003f7e:	d402      	bmi.n	8003f86 <_vfiprintf_r+0x1fe>
 8003f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f82:	f7ff fddd 	bl	8003b40 <__retarget_lock_release_recursive>
 8003f86:	89ab      	ldrh	r3, [r5, #12]
 8003f88:	065b      	lsls	r3, r3, #25
 8003f8a:	f53f af1f 	bmi.w	8003dcc <_vfiprintf_r+0x44>
 8003f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f90:	e71e      	b.n	8003dd0 <_vfiprintf_r+0x48>
 8003f92:	ab03      	add	r3, sp, #12
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	462a      	mov	r2, r5
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <_vfiprintf_r+0x228>)
 8003f9a:	a904      	add	r1, sp, #16
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	f000 f879 	bl	8004094 <_printf_i>
 8003fa2:	e7e4      	b.n	8003f6e <_vfiprintf_r+0x1e6>
 8003fa4:	080046e8 	.word	0x080046e8
 8003fa8:	080046f2 	.word	0x080046f2
 8003fac:	00000000 	.word	0x00000000
 8003fb0:	08003d63 	.word	0x08003d63
 8003fb4:	080046ee 	.word	0x080046ee

08003fb8 <_printf_common>:
 8003fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fbc:	4616      	mov	r6, r2
 8003fbe:	4698      	mov	r8, r3
 8003fc0:	688a      	ldr	r2, [r1, #8]
 8003fc2:	690b      	ldr	r3, [r1, #16]
 8003fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	bfb8      	it	lt
 8003fcc:	4613      	movlt	r3, r2
 8003fce:	6033      	str	r3, [r6, #0]
 8003fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	b10a      	cbz	r2, 8003fde <_printf_common+0x26>
 8003fda:	3301      	adds	r3, #1
 8003fdc:	6033      	str	r3, [r6, #0]
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	0699      	lsls	r1, r3, #26
 8003fe2:	bf42      	ittt	mi
 8003fe4:	6833      	ldrmi	r3, [r6, #0]
 8003fe6:	3302      	addmi	r3, #2
 8003fe8:	6033      	strmi	r3, [r6, #0]
 8003fea:	6825      	ldr	r5, [r4, #0]
 8003fec:	f015 0506 	ands.w	r5, r5, #6
 8003ff0:	d106      	bne.n	8004000 <_printf_common+0x48>
 8003ff2:	f104 0a19 	add.w	sl, r4, #25
 8003ff6:	68e3      	ldr	r3, [r4, #12]
 8003ff8:	6832      	ldr	r2, [r6, #0]
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	42ab      	cmp	r3, r5
 8003ffe:	dc26      	bgt.n	800404e <_printf_common+0x96>
 8004000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004004:	6822      	ldr	r2, [r4, #0]
 8004006:	3b00      	subs	r3, #0
 8004008:	bf18      	it	ne
 800400a:	2301      	movne	r3, #1
 800400c:	0692      	lsls	r2, r2, #26
 800400e:	d42b      	bmi.n	8004068 <_printf_common+0xb0>
 8004010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004014:	4641      	mov	r1, r8
 8004016:	4638      	mov	r0, r7
 8004018:	47c8      	blx	r9
 800401a:	3001      	adds	r0, #1
 800401c:	d01e      	beq.n	800405c <_printf_common+0xa4>
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	6922      	ldr	r2, [r4, #16]
 8004022:	f003 0306 	and.w	r3, r3, #6
 8004026:	2b04      	cmp	r3, #4
 8004028:	bf02      	ittt	eq
 800402a:	68e5      	ldreq	r5, [r4, #12]
 800402c:	6833      	ldreq	r3, [r6, #0]
 800402e:	1aed      	subeq	r5, r5, r3
 8004030:	68a3      	ldr	r3, [r4, #8]
 8004032:	bf0c      	ite	eq
 8004034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004038:	2500      	movne	r5, #0
 800403a:	4293      	cmp	r3, r2
 800403c:	bfc4      	itt	gt
 800403e:	1a9b      	subgt	r3, r3, r2
 8004040:	18ed      	addgt	r5, r5, r3
 8004042:	2600      	movs	r6, #0
 8004044:	341a      	adds	r4, #26
 8004046:	42b5      	cmp	r5, r6
 8004048:	d11a      	bne.n	8004080 <_printf_common+0xc8>
 800404a:	2000      	movs	r0, #0
 800404c:	e008      	b.n	8004060 <_printf_common+0xa8>
 800404e:	2301      	movs	r3, #1
 8004050:	4652      	mov	r2, sl
 8004052:	4641      	mov	r1, r8
 8004054:	4638      	mov	r0, r7
 8004056:	47c8      	blx	r9
 8004058:	3001      	adds	r0, #1
 800405a:	d103      	bne.n	8004064 <_printf_common+0xac>
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004064:	3501      	adds	r5, #1
 8004066:	e7c6      	b.n	8003ff6 <_printf_common+0x3e>
 8004068:	18e1      	adds	r1, r4, r3
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	2030      	movs	r0, #48	@ 0x30
 800406e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004072:	4422      	add	r2, r4
 8004074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800407c:	3302      	adds	r3, #2
 800407e:	e7c7      	b.n	8004010 <_printf_common+0x58>
 8004080:	2301      	movs	r3, #1
 8004082:	4622      	mov	r2, r4
 8004084:	4641      	mov	r1, r8
 8004086:	4638      	mov	r0, r7
 8004088:	47c8      	blx	r9
 800408a:	3001      	adds	r0, #1
 800408c:	d0e6      	beq.n	800405c <_printf_common+0xa4>
 800408e:	3601      	adds	r6, #1
 8004090:	e7d9      	b.n	8004046 <_printf_common+0x8e>
	...

08004094 <_printf_i>:
 8004094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004098:	7e0f      	ldrb	r7, [r1, #24]
 800409a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800409c:	2f78      	cmp	r7, #120	@ 0x78
 800409e:	4691      	mov	r9, r2
 80040a0:	4680      	mov	r8, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	469a      	mov	sl, r3
 80040a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040aa:	d807      	bhi.n	80040bc <_printf_i+0x28>
 80040ac:	2f62      	cmp	r7, #98	@ 0x62
 80040ae:	d80a      	bhi.n	80040c6 <_printf_i+0x32>
 80040b0:	2f00      	cmp	r7, #0
 80040b2:	f000 80d1 	beq.w	8004258 <_printf_i+0x1c4>
 80040b6:	2f58      	cmp	r7, #88	@ 0x58
 80040b8:	f000 80b8 	beq.w	800422c <_printf_i+0x198>
 80040bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040c4:	e03a      	b.n	800413c <_printf_i+0xa8>
 80040c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040ca:	2b15      	cmp	r3, #21
 80040cc:	d8f6      	bhi.n	80040bc <_printf_i+0x28>
 80040ce:	a101      	add	r1, pc, #4	@ (adr r1, 80040d4 <_printf_i+0x40>)
 80040d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040d4:	0800412d 	.word	0x0800412d
 80040d8:	08004141 	.word	0x08004141
 80040dc:	080040bd 	.word	0x080040bd
 80040e0:	080040bd 	.word	0x080040bd
 80040e4:	080040bd 	.word	0x080040bd
 80040e8:	080040bd 	.word	0x080040bd
 80040ec:	08004141 	.word	0x08004141
 80040f0:	080040bd 	.word	0x080040bd
 80040f4:	080040bd 	.word	0x080040bd
 80040f8:	080040bd 	.word	0x080040bd
 80040fc:	080040bd 	.word	0x080040bd
 8004100:	0800423f 	.word	0x0800423f
 8004104:	0800416b 	.word	0x0800416b
 8004108:	080041f9 	.word	0x080041f9
 800410c:	080040bd 	.word	0x080040bd
 8004110:	080040bd 	.word	0x080040bd
 8004114:	08004261 	.word	0x08004261
 8004118:	080040bd 	.word	0x080040bd
 800411c:	0800416b 	.word	0x0800416b
 8004120:	080040bd 	.word	0x080040bd
 8004124:	080040bd 	.word	0x080040bd
 8004128:	08004201 	.word	0x08004201
 800412c:	6833      	ldr	r3, [r6, #0]
 800412e:	1d1a      	adds	r2, r3, #4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6032      	str	r2, [r6, #0]
 8004134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800413c:	2301      	movs	r3, #1
 800413e:	e09c      	b.n	800427a <_printf_i+0x1e6>
 8004140:	6833      	ldr	r3, [r6, #0]
 8004142:	6820      	ldr	r0, [r4, #0]
 8004144:	1d19      	adds	r1, r3, #4
 8004146:	6031      	str	r1, [r6, #0]
 8004148:	0606      	lsls	r6, r0, #24
 800414a:	d501      	bpl.n	8004150 <_printf_i+0xbc>
 800414c:	681d      	ldr	r5, [r3, #0]
 800414e:	e003      	b.n	8004158 <_printf_i+0xc4>
 8004150:	0645      	lsls	r5, r0, #25
 8004152:	d5fb      	bpl.n	800414c <_printf_i+0xb8>
 8004154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004158:	2d00      	cmp	r5, #0
 800415a:	da03      	bge.n	8004164 <_printf_i+0xd0>
 800415c:	232d      	movs	r3, #45	@ 0x2d
 800415e:	426d      	negs	r5, r5
 8004160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004164:	4858      	ldr	r0, [pc, #352]	@ (80042c8 <_printf_i+0x234>)
 8004166:	230a      	movs	r3, #10
 8004168:	e011      	b.n	800418e <_printf_i+0xfa>
 800416a:	6821      	ldr	r1, [r4, #0]
 800416c:	6833      	ldr	r3, [r6, #0]
 800416e:	0608      	lsls	r0, r1, #24
 8004170:	f853 5b04 	ldr.w	r5, [r3], #4
 8004174:	d402      	bmi.n	800417c <_printf_i+0xe8>
 8004176:	0649      	lsls	r1, r1, #25
 8004178:	bf48      	it	mi
 800417a:	b2ad      	uxthmi	r5, r5
 800417c:	2f6f      	cmp	r7, #111	@ 0x6f
 800417e:	4852      	ldr	r0, [pc, #328]	@ (80042c8 <_printf_i+0x234>)
 8004180:	6033      	str	r3, [r6, #0]
 8004182:	bf14      	ite	ne
 8004184:	230a      	movne	r3, #10
 8004186:	2308      	moveq	r3, #8
 8004188:	2100      	movs	r1, #0
 800418a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800418e:	6866      	ldr	r6, [r4, #4]
 8004190:	60a6      	str	r6, [r4, #8]
 8004192:	2e00      	cmp	r6, #0
 8004194:	db05      	blt.n	80041a2 <_printf_i+0x10e>
 8004196:	6821      	ldr	r1, [r4, #0]
 8004198:	432e      	orrs	r6, r5
 800419a:	f021 0104 	bic.w	r1, r1, #4
 800419e:	6021      	str	r1, [r4, #0]
 80041a0:	d04b      	beq.n	800423a <_printf_i+0x1a6>
 80041a2:	4616      	mov	r6, r2
 80041a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80041a8:	fb03 5711 	mls	r7, r3, r1, r5
 80041ac:	5dc7      	ldrb	r7, [r0, r7]
 80041ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041b2:	462f      	mov	r7, r5
 80041b4:	42bb      	cmp	r3, r7
 80041b6:	460d      	mov	r5, r1
 80041b8:	d9f4      	bls.n	80041a4 <_printf_i+0x110>
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d10b      	bne.n	80041d6 <_printf_i+0x142>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	07df      	lsls	r7, r3, #31
 80041c2:	d508      	bpl.n	80041d6 <_printf_i+0x142>
 80041c4:	6923      	ldr	r3, [r4, #16]
 80041c6:	6861      	ldr	r1, [r4, #4]
 80041c8:	4299      	cmp	r1, r3
 80041ca:	bfde      	ittt	le
 80041cc:	2330      	movle	r3, #48	@ 0x30
 80041ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041d6:	1b92      	subs	r2, r2, r6
 80041d8:	6122      	str	r2, [r4, #16]
 80041da:	f8cd a000 	str.w	sl, [sp]
 80041de:	464b      	mov	r3, r9
 80041e0:	aa03      	add	r2, sp, #12
 80041e2:	4621      	mov	r1, r4
 80041e4:	4640      	mov	r0, r8
 80041e6:	f7ff fee7 	bl	8003fb8 <_printf_common>
 80041ea:	3001      	adds	r0, #1
 80041ec:	d14a      	bne.n	8004284 <_printf_i+0x1f0>
 80041ee:	f04f 30ff 	mov.w	r0, #4294967295
 80041f2:	b004      	add	sp, #16
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	f043 0320 	orr.w	r3, r3, #32
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	4832      	ldr	r0, [pc, #200]	@ (80042cc <_printf_i+0x238>)
 8004202:	2778      	movs	r7, #120	@ 0x78
 8004204:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	6831      	ldr	r1, [r6, #0]
 800420c:	061f      	lsls	r7, r3, #24
 800420e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004212:	d402      	bmi.n	800421a <_printf_i+0x186>
 8004214:	065f      	lsls	r7, r3, #25
 8004216:	bf48      	it	mi
 8004218:	b2ad      	uxthmi	r5, r5
 800421a:	6031      	str	r1, [r6, #0]
 800421c:	07d9      	lsls	r1, r3, #31
 800421e:	bf44      	itt	mi
 8004220:	f043 0320 	orrmi.w	r3, r3, #32
 8004224:	6023      	strmi	r3, [r4, #0]
 8004226:	b11d      	cbz	r5, 8004230 <_printf_i+0x19c>
 8004228:	2310      	movs	r3, #16
 800422a:	e7ad      	b.n	8004188 <_printf_i+0xf4>
 800422c:	4826      	ldr	r0, [pc, #152]	@ (80042c8 <_printf_i+0x234>)
 800422e:	e7e9      	b.n	8004204 <_printf_i+0x170>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	f023 0320 	bic.w	r3, r3, #32
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	e7f6      	b.n	8004228 <_printf_i+0x194>
 800423a:	4616      	mov	r6, r2
 800423c:	e7bd      	b.n	80041ba <_printf_i+0x126>
 800423e:	6833      	ldr	r3, [r6, #0]
 8004240:	6825      	ldr	r5, [r4, #0]
 8004242:	6961      	ldr	r1, [r4, #20]
 8004244:	1d18      	adds	r0, r3, #4
 8004246:	6030      	str	r0, [r6, #0]
 8004248:	062e      	lsls	r6, r5, #24
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	d501      	bpl.n	8004252 <_printf_i+0x1be>
 800424e:	6019      	str	r1, [r3, #0]
 8004250:	e002      	b.n	8004258 <_printf_i+0x1c4>
 8004252:	0668      	lsls	r0, r5, #25
 8004254:	d5fb      	bpl.n	800424e <_printf_i+0x1ba>
 8004256:	8019      	strh	r1, [r3, #0]
 8004258:	2300      	movs	r3, #0
 800425a:	6123      	str	r3, [r4, #16]
 800425c:	4616      	mov	r6, r2
 800425e:	e7bc      	b.n	80041da <_printf_i+0x146>
 8004260:	6833      	ldr	r3, [r6, #0]
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	6032      	str	r2, [r6, #0]
 8004266:	681e      	ldr	r6, [r3, #0]
 8004268:	6862      	ldr	r2, [r4, #4]
 800426a:	2100      	movs	r1, #0
 800426c:	4630      	mov	r0, r6
 800426e:	f7fb ffaf 	bl	80001d0 <memchr>
 8004272:	b108      	cbz	r0, 8004278 <_printf_i+0x1e4>
 8004274:	1b80      	subs	r0, r0, r6
 8004276:	6060      	str	r0, [r4, #4]
 8004278:	6863      	ldr	r3, [r4, #4]
 800427a:	6123      	str	r3, [r4, #16]
 800427c:	2300      	movs	r3, #0
 800427e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004282:	e7aa      	b.n	80041da <_printf_i+0x146>
 8004284:	6923      	ldr	r3, [r4, #16]
 8004286:	4632      	mov	r2, r6
 8004288:	4649      	mov	r1, r9
 800428a:	4640      	mov	r0, r8
 800428c:	47d0      	blx	sl
 800428e:	3001      	adds	r0, #1
 8004290:	d0ad      	beq.n	80041ee <_printf_i+0x15a>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	079b      	lsls	r3, r3, #30
 8004296:	d413      	bmi.n	80042c0 <_printf_i+0x22c>
 8004298:	68e0      	ldr	r0, [r4, #12]
 800429a:	9b03      	ldr	r3, [sp, #12]
 800429c:	4298      	cmp	r0, r3
 800429e:	bfb8      	it	lt
 80042a0:	4618      	movlt	r0, r3
 80042a2:	e7a6      	b.n	80041f2 <_printf_i+0x15e>
 80042a4:	2301      	movs	r3, #1
 80042a6:	4632      	mov	r2, r6
 80042a8:	4649      	mov	r1, r9
 80042aa:	4640      	mov	r0, r8
 80042ac:	47d0      	blx	sl
 80042ae:	3001      	adds	r0, #1
 80042b0:	d09d      	beq.n	80041ee <_printf_i+0x15a>
 80042b2:	3501      	adds	r5, #1
 80042b4:	68e3      	ldr	r3, [r4, #12]
 80042b6:	9903      	ldr	r1, [sp, #12]
 80042b8:	1a5b      	subs	r3, r3, r1
 80042ba:	42ab      	cmp	r3, r5
 80042bc:	dcf2      	bgt.n	80042a4 <_printf_i+0x210>
 80042be:	e7eb      	b.n	8004298 <_printf_i+0x204>
 80042c0:	2500      	movs	r5, #0
 80042c2:	f104 0619 	add.w	r6, r4, #25
 80042c6:	e7f5      	b.n	80042b4 <_printf_i+0x220>
 80042c8:	080046f9 	.word	0x080046f9
 80042cc:	0800470a 	.word	0x0800470a

080042d0 <__sflush_r>:
 80042d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d8:	0716      	lsls	r6, r2, #28
 80042da:	4605      	mov	r5, r0
 80042dc:	460c      	mov	r4, r1
 80042de:	d454      	bmi.n	800438a <__sflush_r+0xba>
 80042e0:	684b      	ldr	r3, [r1, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	dc02      	bgt.n	80042ec <__sflush_r+0x1c>
 80042e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	dd48      	ble.n	800437e <__sflush_r+0xae>
 80042ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	d045      	beq.n	800437e <__sflush_r+0xae>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042f8:	682f      	ldr	r7, [r5, #0]
 80042fa:	6a21      	ldr	r1, [r4, #32]
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	d030      	beq.n	8004362 <__sflush_r+0x92>
 8004300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	0759      	lsls	r1, r3, #29
 8004306:	d505      	bpl.n	8004314 <__sflush_r+0x44>
 8004308:	6863      	ldr	r3, [r4, #4]
 800430a:	1ad2      	subs	r2, r2, r3
 800430c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800430e:	b10b      	cbz	r3, 8004314 <__sflush_r+0x44>
 8004310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004312:	1ad2      	subs	r2, r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004318:	6a21      	ldr	r1, [r4, #32]
 800431a:	4628      	mov	r0, r5
 800431c:	47b0      	blx	r6
 800431e:	1c43      	adds	r3, r0, #1
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	d106      	bne.n	8004332 <__sflush_r+0x62>
 8004324:	6829      	ldr	r1, [r5, #0]
 8004326:	291d      	cmp	r1, #29
 8004328:	d82b      	bhi.n	8004382 <__sflush_r+0xb2>
 800432a:	4a2a      	ldr	r2, [pc, #168]	@ (80043d4 <__sflush_r+0x104>)
 800432c:	40ca      	lsrs	r2, r1
 800432e:	07d6      	lsls	r6, r2, #31
 8004330:	d527      	bpl.n	8004382 <__sflush_r+0xb2>
 8004332:	2200      	movs	r2, #0
 8004334:	6062      	str	r2, [r4, #4]
 8004336:	04d9      	lsls	r1, r3, #19
 8004338:	6922      	ldr	r2, [r4, #16]
 800433a:	6022      	str	r2, [r4, #0]
 800433c:	d504      	bpl.n	8004348 <__sflush_r+0x78>
 800433e:	1c42      	adds	r2, r0, #1
 8004340:	d101      	bne.n	8004346 <__sflush_r+0x76>
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	b903      	cbnz	r3, 8004348 <__sflush_r+0x78>
 8004346:	6560      	str	r0, [r4, #84]	@ 0x54
 8004348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800434a:	602f      	str	r7, [r5, #0]
 800434c:	b1b9      	cbz	r1, 800437e <__sflush_r+0xae>
 800434e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004352:	4299      	cmp	r1, r3
 8004354:	d002      	beq.n	800435c <__sflush_r+0x8c>
 8004356:	4628      	mov	r0, r5
 8004358:	f7ff fbf4 	bl	8003b44 <_free_r>
 800435c:	2300      	movs	r3, #0
 800435e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004360:	e00d      	b.n	800437e <__sflush_r+0xae>
 8004362:	2301      	movs	r3, #1
 8004364:	4628      	mov	r0, r5
 8004366:	47b0      	blx	r6
 8004368:	4602      	mov	r2, r0
 800436a:	1c50      	adds	r0, r2, #1
 800436c:	d1c9      	bne.n	8004302 <__sflush_r+0x32>
 800436e:	682b      	ldr	r3, [r5, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0c6      	beq.n	8004302 <__sflush_r+0x32>
 8004374:	2b1d      	cmp	r3, #29
 8004376:	d001      	beq.n	800437c <__sflush_r+0xac>
 8004378:	2b16      	cmp	r3, #22
 800437a:	d11e      	bne.n	80043ba <__sflush_r+0xea>
 800437c:	602f      	str	r7, [r5, #0]
 800437e:	2000      	movs	r0, #0
 8004380:	e022      	b.n	80043c8 <__sflush_r+0xf8>
 8004382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004386:	b21b      	sxth	r3, r3
 8004388:	e01b      	b.n	80043c2 <__sflush_r+0xf2>
 800438a:	690f      	ldr	r7, [r1, #16]
 800438c:	2f00      	cmp	r7, #0
 800438e:	d0f6      	beq.n	800437e <__sflush_r+0xae>
 8004390:	0793      	lsls	r3, r2, #30
 8004392:	680e      	ldr	r6, [r1, #0]
 8004394:	bf08      	it	eq
 8004396:	694b      	ldreq	r3, [r1, #20]
 8004398:	600f      	str	r7, [r1, #0]
 800439a:	bf18      	it	ne
 800439c:	2300      	movne	r3, #0
 800439e:	eba6 0807 	sub.w	r8, r6, r7
 80043a2:	608b      	str	r3, [r1, #8]
 80043a4:	f1b8 0f00 	cmp.w	r8, #0
 80043a8:	dde9      	ble.n	800437e <__sflush_r+0xae>
 80043aa:	6a21      	ldr	r1, [r4, #32]
 80043ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80043ae:	4643      	mov	r3, r8
 80043b0:	463a      	mov	r2, r7
 80043b2:	4628      	mov	r0, r5
 80043b4:	47b0      	blx	r6
 80043b6:	2800      	cmp	r0, #0
 80043b8:	dc08      	bgt.n	80043cc <__sflush_r+0xfc>
 80043ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043c2:	81a3      	strh	r3, [r4, #12]
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043cc:	4407      	add	r7, r0
 80043ce:	eba8 0800 	sub.w	r8, r8, r0
 80043d2:	e7e7      	b.n	80043a4 <__sflush_r+0xd4>
 80043d4:	20400001 	.word	0x20400001

080043d8 <_fflush_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	690b      	ldr	r3, [r1, #16]
 80043dc:	4605      	mov	r5, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	b913      	cbnz	r3, 80043e8 <_fflush_r+0x10>
 80043e2:	2500      	movs	r5, #0
 80043e4:	4628      	mov	r0, r5
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	b118      	cbz	r0, 80043f2 <_fflush_r+0x1a>
 80043ea:	6a03      	ldr	r3, [r0, #32]
 80043ec:	b90b      	cbnz	r3, 80043f2 <_fflush_r+0x1a>
 80043ee:	f7ff faa1 	bl	8003934 <__sinit>
 80043f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f3      	beq.n	80043e2 <_fflush_r+0xa>
 80043fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043fc:	07d0      	lsls	r0, r2, #31
 80043fe:	d404      	bmi.n	800440a <_fflush_r+0x32>
 8004400:	0599      	lsls	r1, r3, #22
 8004402:	d402      	bmi.n	800440a <_fflush_r+0x32>
 8004404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004406:	f7ff fb9a 	bl	8003b3e <__retarget_lock_acquire_recursive>
 800440a:	4628      	mov	r0, r5
 800440c:	4621      	mov	r1, r4
 800440e:	f7ff ff5f 	bl	80042d0 <__sflush_r>
 8004412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004414:	07da      	lsls	r2, r3, #31
 8004416:	4605      	mov	r5, r0
 8004418:	d4e4      	bmi.n	80043e4 <_fflush_r+0xc>
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	059b      	lsls	r3, r3, #22
 800441e:	d4e1      	bmi.n	80043e4 <_fflush_r+0xc>
 8004420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004422:	f7ff fb8d 	bl	8003b40 <__retarget_lock_release_recursive>
 8004426:	e7dd      	b.n	80043e4 <_fflush_r+0xc>

08004428 <__swbuf_r>:
 8004428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442a:	460e      	mov	r6, r1
 800442c:	4614      	mov	r4, r2
 800442e:	4605      	mov	r5, r0
 8004430:	b118      	cbz	r0, 800443a <__swbuf_r+0x12>
 8004432:	6a03      	ldr	r3, [r0, #32]
 8004434:	b90b      	cbnz	r3, 800443a <__swbuf_r+0x12>
 8004436:	f7ff fa7d 	bl	8003934 <__sinit>
 800443a:	69a3      	ldr	r3, [r4, #24]
 800443c:	60a3      	str	r3, [r4, #8]
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	071a      	lsls	r2, r3, #28
 8004442:	d501      	bpl.n	8004448 <__swbuf_r+0x20>
 8004444:	6923      	ldr	r3, [r4, #16]
 8004446:	b943      	cbnz	r3, 800445a <__swbuf_r+0x32>
 8004448:	4621      	mov	r1, r4
 800444a:	4628      	mov	r0, r5
 800444c:	f000 f82a 	bl	80044a4 <__swsetup_r>
 8004450:	b118      	cbz	r0, 800445a <__swbuf_r+0x32>
 8004452:	f04f 37ff 	mov.w	r7, #4294967295
 8004456:	4638      	mov	r0, r7
 8004458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	6922      	ldr	r2, [r4, #16]
 800445e:	1a98      	subs	r0, r3, r2
 8004460:	6963      	ldr	r3, [r4, #20]
 8004462:	b2f6      	uxtb	r6, r6
 8004464:	4283      	cmp	r3, r0
 8004466:	4637      	mov	r7, r6
 8004468:	dc05      	bgt.n	8004476 <__swbuf_r+0x4e>
 800446a:	4621      	mov	r1, r4
 800446c:	4628      	mov	r0, r5
 800446e:	f7ff ffb3 	bl	80043d8 <_fflush_r>
 8004472:	2800      	cmp	r0, #0
 8004474:	d1ed      	bne.n	8004452 <__swbuf_r+0x2a>
 8004476:	68a3      	ldr	r3, [r4, #8]
 8004478:	3b01      	subs	r3, #1
 800447a:	60a3      	str	r3, [r4, #8]
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	6022      	str	r2, [r4, #0]
 8004482:	701e      	strb	r6, [r3, #0]
 8004484:	6962      	ldr	r2, [r4, #20]
 8004486:	1c43      	adds	r3, r0, #1
 8004488:	429a      	cmp	r2, r3
 800448a:	d004      	beq.n	8004496 <__swbuf_r+0x6e>
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	07db      	lsls	r3, r3, #31
 8004490:	d5e1      	bpl.n	8004456 <__swbuf_r+0x2e>
 8004492:	2e0a      	cmp	r6, #10
 8004494:	d1df      	bne.n	8004456 <__swbuf_r+0x2e>
 8004496:	4621      	mov	r1, r4
 8004498:	4628      	mov	r0, r5
 800449a:	f7ff ff9d 	bl	80043d8 <_fflush_r>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d0d9      	beq.n	8004456 <__swbuf_r+0x2e>
 80044a2:	e7d6      	b.n	8004452 <__swbuf_r+0x2a>

080044a4 <__swsetup_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4b29      	ldr	r3, [pc, #164]	@ (800454c <__swsetup_r+0xa8>)
 80044a8:	4605      	mov	r5, r0
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	460c      	mov	r4, r1
 80044ae:	b118      	cbz	r0, 80044b8 <__swsetup_r+0x14>
 80044b0:	6a03      	ldr	r3, [r0, #32]
 80044b2:	b90b      	cbnz	r3, 80044b8 <__swsetup_r+0x14>
 80044b4:	f7ff fa3e 	bl	8003934 <__sinit>
 80044b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044bc:	0719      	lsls	r1, r3, #28
 80044be:	d422      	bmi.n	8004506 <__swsetup_r+0x62>
 80044c0:	06da      	lsls	r2, r3, #27
 80044c2:	d407      	bmi.n	80044d4 <__swsetup_r+0x30>
 80044c4:	2209      	movs	r2, #9
 80044c6:	602a      	str	r2, [r5, #0]
 80044c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	f04f 30ff 	mov.w	r0, #4294967295
 80044d2:	e033      	b.n	800453c <__swsetup_r+0x98>
 80044d4:	0758      	lsls	r0, r3, #29
 80044d6:	d512      	bpl.n	80044fe <__swsetup_r+0x5a>
 80044d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044da:	b141      	cbz	r1, 80044ee <__swsetup_r+0x4a>
 80044dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044e0:	4299      	cmp	r1, r3
 80044e2:	d002      	beq.n	80044ea <__swsetup_r+0x46>
 80044e4:	4628      	mov	r0, r5
 80044e6:	f7ff fb2d 	bl	8003b44 <_free_r>
 80044ea:	2300      	movs	r3, #0
 80044ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	2300      	movs	r3, #0
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	6923      	ldr	r3, [r4, #16]
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f043 0308 	orr.w	r3, r3, #8
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	b94b      	cbnz	r3, 800451e <__swsetup_r+0x7a>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004514:	d003      	beq.n	800451e <__swsetup_r+0x7a>
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 f84f 	bl	80045bc <__smakebuf_r>
 800451e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004522:	f013 0201 	ands.w	r2, r3, #1
 8004526:	d00a      	beq.n	800453e <__swsetup_r+0x9a>
 8004528:	2200      	movs	r2, #0
 800452a:	60a2      	str	r2, [r4, #8]
 800452c:	6962      	ldr	r2, [r4, #20]
 800452e:	4252      	negs	r2, r2
 8004530:	61a2      	str	r2, [r4, #24]
 8004532:	6922      	ldr	r2, [r4, #16]
 8004534:	b942      	cbnz	r2, 8004548 <__swsetup_r+0xa4>
 8004536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800453a:	d1c5      	bne.n	80044c8 <__swsetup_r+0x24>
 800453c:	bd38      	pop	{r3, r4, r5, pc}
 800453e:	0799      	lsls	r1, r3, #30
 8004540:	bf58      	it	pl
 8004542:	6962      	ldrpl	r2, [r4, #20]
 8004544:	60a2      	str	r2, [r4, #8]
 8004546:	e7f4      	b.n	8004532 <__swsetup_r+0x8e>
 8004548:	2000      	movs	r0, #0
 800454a:	e7f7      	b.n	800453c <__swsetup_r+0x98>
 800454c:	20000018 	.word	0x20000018

08004550 <_sbrk_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4d06      	ldr	r5, [pc, #24]	@ (800456c <_sbrk_r+0x1c>)
 8004554:	2300      	movs	r3, #0
 8004556:	4604      	mov	r4, r0
 8004558:	4608      	mov	r0, r1
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	f7fc fab6 	bl	8000acc <_sbrk>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_sbrk_r+0x1a>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_sbrk_r+0x1a>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	20000728 	.word	0x20000728

08004570 <__swhatbuf_r>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	460c      	mov	r4, r1
 8004574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004578:	2900      	cmp	r1, #0
 800457a:	b096      	sub	sp, #88	@ 0x58
 800457c:	4615      	mov	r5, r2
 800457e:	461e      	mov	r6, r3
 8004580:	da0d      	bge.n	800459e <__swhatbuf_r+0x2e>
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004588:	f04f 0100 	mov.w	r1, #0
 800458c:	bf14      	ite	ne
 800458e:	2340      	movne	r3, #64	@ 0x40
 8004590:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004594:	2000      	movs	r0, #0
 8004596:	6031      	str	r1, [r6, #0]
 8004598:	602b      	str	r3, [r5, #0]
 800459a:	b016      	add	sp, #88	@ 0x58
 800459c:	bd70      	pop	{r4, r5, r6, pc}
 800459e:	466a      	mov	r2, sp
 80045a0:	f000 f848 	bl	8004634 <_fstat_r>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	dbec      	blt.n	8004582 <__swhatbuf_r+0x12>
 80045a8:	9901      	ldr	r1, [sp, #4]
 80045aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80045ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80045b2:	4259      	negs	r1, r3
 80045b4:	4159      	adcs	r1, r3
 80045b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045ba:	e7eb      	b.n	8004594 <__swhatbuf_r+0x24>

080045bc <__smakebuf_r>:
 80045bc:	898b      	ldrh	r3, [r1, #12]
 80045be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045c0:	079d      	lsls	r5, r3, #30
 80045c2:	4606      	mov	r6, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	d507      	bpl.n	80045d8 <__smakebuf_r+0x1c>
 80045c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	6123      	str	r3, [r4, #16]
 80045d0:	2301      	movs	r3, #1
 80045d2:	6163      	str	r3, [r4, #20]
 80045d4:	b003      	add	sp, #12
 80045d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d8:	ab01      	add	r3, sp, #4
 80045da:	466a      	mov	r2, sp
 80045dc:	f7ff ffc8 	bl	8004570 <__swhatbuf_r>
 80045e0:	9f00      	ldr	r7, [sp, #0]
 80045e2:	4605      	mov	r5, r0
 80045e4:	4639      	mov	r1, r7
 80045e6:	4630      	mov	r0, r6
 80045e8:	f7ff fb18 	bl	8003c1c <_malloc_r>
 80045ec:	b948      	cbnz	r0, 8004602 <__smakebuf_r+0x46>
 80045ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f2:	059a      	lsls	r2, r3, #22
 80045f4:	d4ee      	bmi.n	80045d4 <__smakebuf_r+0x18>
 80045f6:	f023 0303 	bic.w	r3, r3, #3
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	81a3      	strh	r3, [r4, #12]
 8004600:	e7e2      	b.n	80045c8 <__smakebuf_r+0xc>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	6020      	str	r0, [r4, #0]
 8004606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004612:	b15b      	cbz	r3, 800462c <__smakebuf_r+0x70>
 8004614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004618:	4630      	mov	r0, r6
 800461a:	f000 f81d 	bl	8004658 <_isatty_r>
 800461e:	b128      	cbz	r0, 800462c <__smakebuf_r+0x70>
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	81a3      	strh	r3, [r4, #12]
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	431d      	orrs	r5, r3
 8004630:	81a5      	strh	r5, [r4, #12]
 8004632:	e7cf      	b.n	80045d4 <__smakebuf_r+0x18>

08004634 <_fstat_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4d07      	ldr	r5, [pc, #28]	@ (8004654 <_fstat_r+0x20>)
 8004638:	2300      	movs	r3, #0
 800463a:	4604      	mov	r4, r0
 800463c:	4608      	mov	r0, r1
 800463e:	4611      	mov	r1, r2
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	f7fc fa1a 	bl	8000a7a <_fstat>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d102      	bne.n	8004650 <_fstat_r+0x1c>
 800464a:	682b      	ldr	r3, [r5, #0]
 800464c:	b103      	cbz	r3, 8004650 <_fstat_r+0x1c>
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	bd38      	pop	{r3, r4, r5, pc}
 8004652:	bf00      	nop
 8004654:	20000728 	.word	0x20000728

08004658 <_isatty_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4d06      	ldr	r5, [pc, #24]	@ (8004674 <_isatty_r+0x1c>)
 800465c:	2300      	movs	r3, #0
 800465e:	4604      	mov	r4, r0
 8004660:	4608      	mov	r0, r1
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	f7fc fa19 	bl	8000a9a <_isatty>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d102      	bne.n	8004672 <_isatty_r+0x1a>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	b103      	cbz	r3, 8004672 <_isatty_r+0x1a>
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	bd38      	pop	{r3, r4, r5, pc}
 8004674:	20000728 	.word	0x20000728

08004678 <_init>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	bf00      	nop
 800467c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467e:	bc08      	pop	{r3}
 8004680:	469e      	mov	lr, r3
 8004682:	4770      	bx	lr

08004684 <_fini>:
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	bf00      	nop
 8004688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468a:	bc08      	pop	{r3}
 800468c:	469e      	mov	lr, r3
 800468e:	4770      	bx	lr
